What is Web Technology ? 

Web  Technlogy is the process of creatig web app(websites) . it encompasses several diff aspects such webpage, layout, contents, text, pics, video, graphics design(logo), some network topology(smtp,http,isp,tcp/ip).

Types of Web Tech:
	- Client Side Scripting (Front-End(UI) - HTML,HTML5,CSS,CSS3,JS,Jquery,BS)
	- Server Side Lang( JAVA/PHP/DOTNET/.NET CORE/PYTHON and more)
			(Visual Studio/Wamp/Servlet)


Web Design:
========
-HTML basic +CSS Basic (HTML5+CSS3)

Intro of HTML:
----------------------
-HTML stands for Hypertext Markup Language (tag oriented)
-html is not a programming lang, its a markup lang <>  </>.
-A markup lang is set of markup tags 
	<html>........</html>
-html uses markup tag to describe web pages.
-HTML is not case sensitive.
	<html>..........</HTML>
-When you save an html file you can use either the .html or .htm(html5) file extension.


Basic of Html:
-------------
-Basic tags in html
-attribute of html element
-paragraph
-heading
-Formatting 
-html images
-html link
-html list
-html tables
-html forms


How to Create a webpage in html :
---------------------------------------------
Step1. open any standard editor(VS code, note, notepadd++)
Step 2.Write the tags and save with .html file exten.
Step 3. Run it through any standard browers.(IE, Google , Firefox )


Example:

<html>
<head>
<title>Welcome </title>
</head>
<Body>
<h1 align=center>welcome in my first web page in html</h1>
<h2>welcome in my first web page in html</h2>
<h3>welcome in my first web page in html</h3>
<h4>welcome in my first web page in html</h4>
<h5>welcome in my first web page in html</h5>
<h6>welcome in my first web page in html</h6>
<p align=right> html para is used to crate a new seprate line of text </p>
</body>
</html>
HTML List:
--------------------
<html>
<head>
<title>Welcome </title>
</head>
<Body>
<h1>Example of List </h1>

<ul>
<li>Book</li>
<li>Eraser </li>
<li>Pencil </li>
</ul>
<br>
<hr>
<ul type="square/oval/circle">
<li>Book</li>
<li>Eraser </li>
<li>Pencil </li>
</ul>
<h2> Order list </h2>
<ol type=1/i/A/a/I>
<li>Java </li>
<li>Python</li>
<li>CSs </li>
</ol>

<h3> Definition List </h3>
<dl>
<dt>Coffee </dt>
<dd>Black Coffie</dd>
<dd>Milk </dd>
<dd>Tea </dd>
<dt> Drinks </dt>
<dd>Cold drink </dd>
<dd>cold water </dd>
</dl>
</body>
</html>

using Grapics and Link in html:
---------------------------------------
<html>
<head>
<title>Welcome </title>
</head>
<Body>
<a href="https://www.google.co.in">
<img src="hero-bg.jpg" width=200 height=120  vspace=50 hspace=60 border=5>

  </a>

</body>
</html>

HTML TABLES: 

THE ATTRIBUTE OF TABLES ARE:

	-<Table> 
	-<Caption> 
	-<tr>
	<th> 
	<td>
Example:

<html>
<head>
<title>Welcome </title>
</head>
<Body>
<table border=2 align=center cellspacing=10 cellpadding=5 width=50% height=50% bgcolor=gold>
<caption> Cts Student table </caption>
<tr>
<th>Rollno </th>
<th>Name</th>
<th> Marks </th>
</tr>
<tr>
<td>A001</td>
<td>Krishan singh </td>
<td>300</td>
</tr>
<tr>
<td>A001</td>
<td>Athira </td>
<td>300</td>
</tr>

</body>
</html>

HTML FORMS:
----------------------
<html>

<Body>
<fieldset>
<legend>CTS User Details </legend>
<form>
FirstName :<input type="text" name="fname"><br>
Password:<input type="password" name="pass"><br>
Gender: <input type="radio" name="gender">Male <br>
<input type="radio" name="gender">Female<br>
Fees: <input type="checkbox" name="fees"><br>
Course <select>
	<option> Java </option>
	<option>dotnet </option>
	<option> Python </option>
</select><br>

Address : <textarea rows=10 cols=20> Address: Cts Banglore </textarea><br>

File upload: <input type="file"><br>
<input type="submit" value="Send me">
<input type="reset" value="Clear">
</fieldset>
</form>
<hr>
<table border=0 cellpadding=10 width=50%>
<tr>
<th>Name: </th>
<td><input type="text" name="fname"></td>
</tr>
<tr>
<th>Name: </th>
<td><input type="text" name="fname"></td>
</tr>
</table>
</body>
</html>


CSS INTRODUCTION:
-----------------------------
CSS stands for cascading Style Sheets. Its a style sheet lang which is used to describe the look and foratting of a html document. if you wanto add some additional features in HTML you must know the css.  

-CSs is used for html page only
-HTML,CSS and JS are used for creating interactive websites (Webapp)

There are 3 types of  css attribute:
-----------------------------------
	-Internal CSS
	-External CSS
	-Inline CSS


CSS Syntax:

h1{ color:red; }

h1 is selector (html element)

Color: is property  it could change the color the text

Note: all the props are must written within a curly {};

Example of  Internal css:
=====================
<html>
<head>
<style>
p{color:red;}
</style>
</head>
<body>
<h1> Welcome in css <h1>
<p>By ADM batch 21 </p>
</body>
</html>

External CSS:
=============
STep1: create a file with test.css 
body{
background-color:grey;
color:white;
}

Step 2: call this file in .html file

<html>
<head>
<link rel="stylesheet" type="text/css" href="test.css">
</head>
<body>
<h1 style=color:blue;> Welcome in css <h1>
<p>By ADM batch 21 </p>
</body>
</html>

CSS Selectors:
=============
A css selectors is pattern to match the elemnts (html) on a webpage. The style rules associated with that selector will applied to the elements that match the selector pattern.

-Universal Selector  (*)
-Element Selector (<p>)
-Id Selector (#)
-Class Selector (.)
-Group selector(more than one html element)


Example:

*{
	margin:20px;
	padding:10px;
	color:red;
	font-family:jokerman;
	background-color:#456;
}


Example of Element Selector:
====================
h1{
	margin:20px;
	padding:10px;
	color:red;
	font-family:jokerman;
	background-color:#456;
}


Id Selector : is used to define style for a single or unique element only (menus)

the id seletor is defined with a hash sign(#) 
Example:

Step1: 
#priyanka{
	margin:20px;
	padding:10px;
	color:red;
	font-family:jokerman;
	background-color:#456;
}

Step 2: call in any html selector 
<h2 id="priyanka"> Welcome in css Family </h2>

Class Selector: The class selector can be sued to any html elements that a  class attribute.
The class selector is defined with period sign(.) immediatelyu followed by the class name.
===========

STep1. 

.rajnath{color:red;}

Step2: call in any elemnet 

<h2 class="rajnath"> Hi this is Rajanath yadav </h2>

Group selector(more than one html element):

Example:

h1,h2,p {
	margin:20px;
	padding:10px;
	color:red;
	font-family:jokerman;
	background-color:#456;
}


CSS Colors: 

Example:

h1{
	color:Tomato;
}
h2{
	background-color:rgb(60,179,20);
}

p{
	color:#00ff00;
}

Text-Alignment in css:
---------------------------------


p{
	color:#00ff00;
	text-align:justify;
}

Text-Transformation:
===============
text-transform:capitalize/uppercase/lowercase;


CSS Background:
	-background-color
	-background-image
	-background-repeat
	-background-attachment
	-background-position

Example:

body{
	background-color:#cccccc;
	background-image:url('hero-bg.jpg');
		background-repeat:repeat-y/x;
		background-repeat:no-repeat;

}

Another one:
body{
	background-color:#cccccc;
	background-image:url('hero-bg.jpg');
		
	background-repeat:no-repeat;
	background-attachment:fixed;
	background-position:center;
	background-position:30% 20%;

}

fulll image in Backaground:
-----------------------------------
css code:
body,html{
	height:100%;
}
.bg{
	background-image:url('ntr.jpg');
	
	/*full 100% height */
	height:100%;
	
	background-position:center;
	background-repeat:no-repeat;
	background-size:cover;
	

html code:
<html>
<head>
<link rel="stylesheet" type="text/css" href="test.css">
</head>
<body>
<div class="bg"></div>
</body>
</html>


CSS font family:
-----------------------
Example:
.abc{
	font-family:Arial;
	font-style:oblique/normal/italic;
	font-weight:bold;
	font-variant:small-caps;
}
h1{font-size:40px;}
	p{font-size:2.5em;}
	
	h2{font-size:20pt;}
	
	.ddc{font-size:100%;}
	body{
		font-family:"Audiowide",sans-serif;
	



html file : 
<html>
<head>
<link rel="stylesheet" type="text/css" href="test.css">

<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Audiowide">
</head>
<body>
<div class="ddc">
Welcome in css font-family
</div>
<h1>By Pixel </h1>
<p class="ddc"> By using Em to change size </p>
</body>
</html>

CSS Links: with css you can create styled in many diff ways.
- a:link : a normal link (unvisisted link)
- a:visited : a link the user has visited 
- a:hover : a link when the user mouse over it , it will change the styels
- a:active : a link the moment its clicked 

Example:

<html>
<head>
<style>
a:link{
color:red;
}
a:visited{
color:green;
}
a:hover{color:hotpink;font-family:jokerman;background-color:grey; }
a:active{color:blue;}

</style>
</head>
<body>
<h2> Example of links </h2>
<p>
<a href="http://www.theoxford.edu/engineering/"> Google me </a>
</p>
</body>
</html>

Styled button example:

<html>
    <head>
        <style>
            body{
                text-align: center;
            }
            #b1{
                background-color: green;
                width:100px;
                height: 50px;
                text-align: center;
            }
            #b1:hover{
                background-color:  blue;
                color: wheat;
                border-radius: 10px;
            }
            #b1:visited{
                color: red;
            }
        </style>
    </head>
<body>
    <input id="b1" value="CTS Button"/>
</body>
</html>

CSS Table:
============
<html>
    <head>
        <style>
          table,th,td{
		  border:1px solid blue;
		  }
		  table{width:100%;
		  border-collapse:collapse;
		  
		  }
		  th{height:70px;}
		  th,td{
		  padding:15px; text-align:left;
		  border-bottom:2px solid #ddd;
		  }
        </style>
    </head>
<body>
   <table>
   <tr>
   <th>First Name </th>
   <th>Last Name </th>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   
</body>
</html>

CSS Hoverable table:
-------------------------------
<html>
    <head>
        <style>
         
		  table{width:100%;
		  border-collapse:collapse;
		  
		  }
		  th{height:70px;}
		  th,td{
		  padding:15px; text-align:left;
		  border-bottom:2px solid #ddd;
		  }
		  tr:hover{background:hotpink;}
		  tr:nth-child(odd){background-color:darkgrey;}
        </style>
    </head>
<body>
   <table>
   <tr>
   <th>First Name </th>
   <th>Last Name </th>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   <tr>
   <td> Peter </td>
   <td> Tom </td>
   </tr>
   
</body>
</html>

CSS Margins:
--------------------
 Margins are used to create more space around the elemnts.

	-margin-top
	-margin-bottom
	-margin-left
	-margin-right

Example:

<html>
    <head>
        <style>
         
		div{
		border:2px solid red;
		margin-top:100px;
		margin-bottom:100px;
		margin-right:150px;
		margin-left:80px;
		background:grey;
		}
		p{margin:25px 50px 75px 100px;
        </style>
    </head>
<body>
 <p>By ADM batch </p>
  <div>
  CTS is one of biggest MNCs.
  </div>
 
</body>
</html>

CSS 3 :
--------------
	- CSS Box Model

CSS Box Model : every elemnet that can be displayed on web page is comparised of one ore rectangular boxes. 
example:
<html>
<head>
<style>
div{ width:300px;height:200px; padding:15px; border:10px solid blue;
margin:20px;
}
</style>
<body>
<div>
What is Event in Jquery:  Events are often triggred by the user's interaction with the web page.
such as when a link or button is clicked, text is entered in textbox etc
</div>
</body>
</html>

	-Css Dimension (width and Height)

	-CSS padding
Example:
<html>
<head>
<style>
h1{padding:25px 75px;}
</style>
<body>
<div>
<h1> What is Event in Jquery:  Events are often triggred by the user's interaction with the web page.
such as when a link or button is clicked, text is entered in textbox etc </h1>
</div>
</body>
</html>


	-CSs Border
Example:
<html>
<head>
<style>
h1{padding:25px 75px; border-style:dotted/dashed/solid/double/inset/outset/groove/ridge;}
</style>
<body>
<div>
<h1> What is Event in Jquery:  Events are often triggred by the user's interaction with the web page.
such as when a link or button is clicked, text is entered in textbox etc </h1>
</div>
</body>
</html>



	-CSS outline

example:
<html>
<head>
<style>
h1{padding:25px 75px; border:8px ridge green;}
p{outline-style:solid; outline-width:5px;outline-color:red;}
h2{outline:5px solid blue;}
</style>
<body>
<div>
<h1> What is Event in Jquery:  Events are often triggred by the user's interaction with the web page.
such as when a link or button is clicked, text is entered in textbox etc </h1>
</div>
<p>Welcome in outline </p>
<h2> By CTS batch </h2>
</body>
</html>



	-CSS overflow : this props controls to contents that is too big to fit into an area. overflow comes with follwings prop:
	-visible : the content will not cliped(cut)
	-hidden: the content will cliped which outside of the box.
	-scroll : it cliped but added the scrollbar to manage content
	-Auto : similar scroll bar

	
Example:

<html>
<head>
<style>
div{ border:2px solid green;
width:200px;
height:150px;
background:gold;
overflow:auto/hidden/visible/scroll;

}
</style>
<body>
<div>
<h1> What is Event in Jquery:  Events are often triggred by the user's interaction with the web page.
such as when a link or button is clicked, text is entered in textbox etc </h1>
</div>

</body>
</html>	
-CSs Display : The Display props control the box's type content element. there are two types of Display prop 
-block  <div>
-inline  <span>

Exmaple:

<html>
<head>
<style>
span{
display:block;
background:lightgreen;
}
a{
display:block;
background:yellow;
}
p{display:black;
background:gold; padding:10px;
}

ul li {display:inline; margin:10px;
}

</style>
<body>

<a href="#">Visit CTS Websites </a><Br>
<span> This span tag genrate the block box </span> <br> <br>
<p>Welcome in CTS Dislay prop </p>
<ul>
<li> Praveena </li>
<li> Kisholay </li>
</ul>

</body>
</html>


	-CSS visibility : The visibiltiy props allows us set the element should be visible or not.


example:
<html>
<head>
<style>
.a{visibility:visible/hidden;

</style>
<body>

<h2 class="a"> Welcome in CTs </h2>

</body>
</html>


	-CSS Float :  this prop specifies how an element should be float. you can set float prop to an elemnet to set them to the left or right but only applies tothe elements that generate boxes that are not fixed positon.

Eample:
<html>
<head>
<style>
img{
float:left;
width:150px;
height:150px;
margin-right:20px;
}

</style>
<body>
<p>
<img src="ntr.jpg">
Nandamuri Taraka Rama Rao, popularly known as NTR, was an Indian actor, filmmaker and politician who served as Chief Minister of Andhra Pradesh for seven years over three terms. He starred in over 300 films, predominantly in Telugu cinema, and was referred to as Viswa Vikhyatha Nata Sarwa Bhouma.
</p>

</body>
</html>

The Clear Property:  we can  use the float prop and we want to next element should be not on right/left we will use clear prop.

Example:
<html>
<head>
<style>
p{
.clear{clear:left;
}
float:left;
margin:10px;
padding:10px;
background:gold;
}
.abc{ float: left;
padding:10px;
border:2px solid red;
}
.bc{ padding:10px;
	border:2px solid green;
	}
.dc {float:left; padding:10px; border:3px solid grey;}
.dc1{padding:10px; border:3px solid red; clear:left;}


</style>
<body>
<p> Floated to Left </p>

<p class="clear"> No flaoting elemnet allowed here </p>


<hr>

<h2> Without Clear </h2>

<div class="abc">Welcome </div>
<div class="bc"> Div2 is after div1 

<h2> With Clear </h2>
<div class="dc">Welcome </div>
<div class="dc1"> Div2 is after div1 
</body>
</html>


	-CSS Pseude-elements: A pseudeo class is used to define a spacial state of an element, A pseude code always start with (:)

-Anchor Pseudo class : a: link {color:red;}
<html>
<head>
<style>

 

 

p i:first-child{color:blue;}

 

</style>
<body>
<p> Rajanth from <strong><i>cts</i></strong></p>

</body>
</html>
	-CSS Opacity :  set the opacity/transparenncy of an element. from 0.0 -1.0 
Example:
<html>
<head>
<style>
img{opacity:0.2;}
img:hover{opacity:1.0};
</style>
<body>
<img src="ntr.jpg">
</body>
</html>


-CSs DropShadows : CSs3 allows to set or apply a drop shadow to an elemnet.

Example:
syntax:

box-shadow:offset-x offset-y blue-radious color;


Exmaple:

<html>
<head>
<style>
.abc{
width:300px;
height:150px;
background:#ccc;
box-shadow:5px 5px 10px blue,10px 10px 20px yellow;
}
p{text-shadow:5px 5px 5px red;}

</style>
<body>
<div class="abc">
Welcome in box-shadow 
</div>
<p>By CTS </p>
</body>
</html>



	-CSs Gradients: css3 allows you  create a gradient from one color to another without using any image.

Example:
<html>
<head>
<style>
.abc{
width:300px;
height:150px;
background:#ccc;
box-shadow:5px 5px 10px blue,10px 10px 20px yellow;
background:linear-gradient(blue,pink);
background:linear-gradient(to right,red,blue);
background:linear-gradient(to top right,red,blue);
background:linear-gradient(90deg,blue,lime);
}
p{text-shadow:5px 5px 5px red;}

</style>
<body>
<div class="abc">
Welcome in box-shadow 
</div>
<p>By CTS </p>
</body>
</html>

CSs3 Rounded Corner:  
	
	-CSS 2D/3D
	-CSS transiton
	-CSs3 Animation etc

CSS transiton: its features css3  it allows the changes in css  value  , it change the state over a spcified duration.
example:
<html>
<head>
<style>
button{
color:#fff;
border:none;
padding:10px 20px;
font:bold 18px jokerman;
transition:background 2s;
transition-property:background,border;
transition-duration:1s 2s;
transition:background 2s ease-in 0s;
}
button:hover {background:#3cc16e;border-color:#288049;

</style>
<body>
<button type="button"> CTS Button </button>
</body>
</html>

CSS3: Animation : you can do animate on HTML element without using Javascript or Flash/Photoshop.
---------------------
Some properties of Animations are:
	-@keyframes
	-animation_name
	-animation_duration
	-animation-delay and many 

Example:

<html>
<head>
<style>
.ani{

margin:50px;
width:150px;
height:103px;
animation-name:cts;
animation-duration:5s;
}
@keyframes cts {
from{background-color:red;}
to{background:yellow;}
}
</style>
<body>
<div class="ani">

</div>

</body>
</html>

Another Example:
============
<html>
<head>
<style>
.ani{


width:100px;
height:100px;
position:relative;
animation:cts 5s;
}
@keyframes cts
{
 0% {background:red; left:0px; top:0px;}
 25% {background:lime; left:300px; top:200px;}
  75% {background:gold; left:0px; top:200px;}
  100% {background:hotpink; left:0px; top:0px;}
 
}

</style>
<body>
<div class="ani">

</div>

</body>
</html>
================================================================================================================================================================================================

What is HTML 5:  HTML5 is newest version of HTML 4.5, only  recently gainng popularility beccause it supports all the modern browsers.

It comes new semantic tags.
- html is is next generation of web 2.0 
-HTML5 is latest , lightest, faastest version of HTML  , it was formed in 2011.

Here HTML5 is the combination of three web tech : HTML + CSS+ JS 


HTML+CSS+JS =HTML 5


Syntax of HTML5:
==============
HTML Doctypes


Example:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="keywords" content="HTML5 Session">
    <meta name="description" content="Come here to beccome UI developer">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>


HTML-5 Semantic Elements:  HTML added 20+ new tags or new elements included new media tags new semetic,svg, canvas etc. 
Some are the example of new tags:

Sematic tag			| Description
-----------------------------------------------------------------------------------
<article>				: Define an article
<aside>				:define content aside  from the page content(left side or right side)
<details>				: it will define additional  details of the page
<figcaption>			: define a caption for pics
<figure>				: add pics, diagrammms, code  etc
<footer>				: define a footer for a page
<header>				:define the header tag
<main>				:main content of a document
<mark>				: define highligheted text
<nav>				:define navgiation menus
<section>				:define the section  in a documnet (div tag)
<summary>			: define the summary for your heading.

=========================================================================================
Example:ViewPort example  tag demo
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="keywords" content="HTML5 Session">
    <meta name="description" content="Come here to beccome UI developer">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body{
            font-size: 20px;
            font-family: cursive;
        }
        img{
            max-width: 100%;
        }
    </style>
</head>
<body>
    <h1>ViewPort example  tag demo </h1>
    <p>
        <img src="a.jpg">
    </p>
</body>
</html>


Article Example: 

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       article{
           width: 300px;
           border:2px solid grey;
           padding:10px;
           border-radius: 10px;
           margin: 20px;
       }
       img{width: 200px; height: 140px;}
    </style>
</head>
<body>
  <article>
      <h1>Breaking News Today </h1>
      <p>Omicron varient  increase rapidly very fast.......</p>
      <H2>About Booster vaacnation........</H2>
      <img src="a.jpg">
  </article>
</body>
</html>

Aside Example:
===========

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     article{
         width: 65%; float:left;padding:10px;
     }
     h4{color:red;font-size: 50px;text-align: none; margin-bottom: 5px;}
     p{font-size: large;text-align: none; margin-top: 0px;}
    </style>
</head>
<body>
  <article>
   <p>Computer Science Job iin market 2021-22</p>
  </article>
  <aside style="width: 25%;float: left; background-color: grey; color:white;padding:10px;">
      <h4>HTML5 Developer jobs</h4>
      <p>Html5 is latest and fastest lang for web devlopment </p>
  </aside>
</body>
</html> 

Details and summary :
===============
<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
    .box{
        color:indigo;
        font-size: 50px;
        text-align: left;
        margin-bottom: 0px;
    }
    </style>
</head>
<body>
 <details>
     <summary class="box">About HTML5</summary>
     <p>Welcome to HTML5 topics come here to learn with easy way....</p>
 </details>
</body>
</html> 

Figure and figcaption:
================
<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
    .box{
        color:indigo;
        width:auto;
        font-size: 50px;
        text-align: left;
        margin-bottom: 0px;
    }
    figcaption{width:50px;font-size: 20px;}
    </style>
</head>
<body>
 <figure class="box">
     <img src="a.jpg" style="width: 20%;">
     <figcaption>Great Actor </figcaption>
 </figure>
</body>
</html> 

Header :
======

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
    header.page_header{
        background: no-repeat left/cover url('l.jpg');
        display: flex;
        height: 120px;
        min-width: 120px;
        align-items: center;
        color:#fff;
        text-shadow: blue 5px 5px;
    }
    header.page_header>h1{
        font:bold;
        margin:2%;
    }
    main{font:2em; font-family: cursive;}
    </style>
</head>
<body>
 <header class="page_header">
     <h1>Cute Puppies portal 2022</h1>
     <main>
         <p>Everyone's should like the lebrador <em>so </em> much like, really a brave and powerfull dog breed</p>
     </main>
 </header>
</body>
</html> 

Footer :

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
    header.page_header{
        background: no-repeat left/cover url('l.jpg');
        display: flex;
        height: 120px;
        min-width: 120px;
        align-items: center;
        color:#fff;
        text-shadow: blue 5px 5px;
    }
    header.page_header>h1{
        font:bold;
        margin:2%;
    }
    main{font:2em; font-family: cursive;}
    article{
        min-height: 100%;
        display: grid;

    }
    footer{
        display: flex;
        justify-content: center;
        padding:5px;
        background-color: hotpink;
        color:white;

    }
    </style>
</head>
<body>
 <header class="page_header">
     <h1>Cute Puppies portal 2022</h1>
    </header>
     <main>
         <p>Everyone's should like the lebrador <em>so </em> much like, really a brave and powerfull dog breed</p>
     </main>
     <article>
         <h1>How to Design the web page</h1>
         <ol>
             <li>Step1: Use Simple html layut </li>
             <li>Step 2: use CSS to enhnace html element</li>
             <li>Step 3: use Bootstrap , html5</li>
         </ol>
         <footer>
             <p> Designed By CTS ADM BATCH 2022</p>
         </footer>
     </article>

 
</body>
</html> 

Nav bar:
==========

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
        <style>
            nav{
                display: block;
                width: 400px;
                background-color: gold; color:black
            }
        </style>
    </head>
    <body>
     
      <nav>
          <a href="#">Home</a> | 
          <a href="#">About</a> |
          <a href="#">Family</a> |
          <a href="#">Gallary</a> |
          <a href="#">Contact</a>
      </nav>
</body>

</html>

HTML5 with Advance:
==================
-Audio
example:

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     
    </head>
    <body>
    <embed height="50px" width="120px" src="songs.mp3">
        <br>

        <object height="50" width="100" data="songs.mp3">
            
        </object>

</body>

</html>


-Video
example:

<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     
    </head>
    <body>
    <video width="320" height="240" controls>
        <source src="pushpa.mp4" type="video/mp4">
        
    </video>
</body>

</html>


-youtube videos
<!DOCTYPE html>
<html lang="en">
<head>
 
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     
    </head>
    <body>
    <iframe width="420" height="345" src="https://www.youtube.com/embed/EEqq0_Etuos">

    </iframe>
</body>

</html>

JS : (Function /DOM) in js:  JS is the most popular and widely used client-side scripting lang. Client-Side scripting means that run within your browsers.
==================
-Js is designed to addd interactivity and dynamic effeccts to the web page by manpulating the content reutrned from a web server.

What you can do with JS:
	-you can modify the content of web page by adddding or removing element.
	-youc an change the style and position of the element.
	-you can perform control transition and animations
	-you can create alert box, confirm box, messagebox on the web page.

Application of JS:
------------------
	-Client Side validation
	-Dynamic dropdownlist menu
	-Display date time(calender)
	-Display analog and digital clock on your web.


Creating hello program in js:
====================
Step1: you need any standard editor(such notepad,notepadd++,VS code,sublime,atom)
Step 2: save your js fiile with .html file extension.
Step 3: Run it through any standard broweres.

-JS basic
-Js operators
Example:

<html>
    <head>
        <script>
            document.write("Welcome in js exammple");
            //variable : var/ let/const keyword
            let a,b,c;
            const price=1000;
            a=90;
            b=10;
            c=a+b;
            document.write("<br>"+c);
            document.write(price);
            </script>
    </head>
</html>

Data types in JS:

Example:


<html>
    <head>
        <script>
           var name="Dinesh";
           let age=23;
           var isMarried=false;
           var per=90.5;
           document.write(name+"<br>");
            </script>
    </head>
</html>

JS operator: 
	-Arithmetic (+,-,*,**,/ %)
	-Comparison(Relational) : <,>,<=,>=,==,!=)
	-Bitwise opt(optional with js)
	-Logical opt(AND,OR,NOT) : &&,||, !)
	-Assignment opt (=, +=, -=, *=,/=)

Example:


    

<html>
<head>
<script>
varx=10;
vary=4;
alert(x+y);
alert(x-y);
document.write(x*y);
document.write(x**y);
</script>
</head>
</html>

​
    assign opt
​
    
<html>
<head>
<script>
letx;
 
x=10;
alert(x);
x=20;
x-=10;
alert(x);

</script>
</head>
</html>



Logical opt:

<html>
    <head>
        <script>
      var year=parseInt(prompt("Enter year by keyboard:"));
      //leap year are divisible by 400 or by 4 but not 100
      if((year%400==0)|| ((year%100!=0)&& (year%4==0))){
          alert(year +"is a leap year");
      }else{
        alert(year +"is not a leap year");
      }
      
            </script>
    </head>
</html>


-JS Control statement: Like many other programming lang, JS allow you to write code that perform diff actions based on the results of a logical statement.
	-if statement
	-if else
Example:

<html>
    <head>
        <script>
      var age=parseInt(prompt("Enter age by keyboard:"));
      if(age==10){
          document.write("<h1> You are child </h1>");
      }
      else 
      {
          document.write("<p style=color:red;> you are not child </p>")
      }
      
            </script>
    </head>
</html>
	-if else if
	-switch
Example:
<html>
    <head>
        <script>
      var a=parseInt(prompt("Enter first number:"));
      var b=parseInt(prompt("Enter second number:"));
      var c=parseInt(prompt("Enter third number:"));
      if((a>b)&&(a>c)){
          alert(a+"is greatest");
      }
      else if((b>a)&&(b>c)){
          alert(b+"is greatest");
      }
      else{alert(c+"is greatest");}

            </script>
    </head>
</html>

Example of switch:

<html>
    <head>
        <script>
      var a=parseInt(prompt("Enter age number:"));
   
            switch(a){
                case 10:
                    document.write('Child');
                    break;
                    case 20: document.write('Adult......');
                    break;
                    default: document.write('Wrong age...'); break;
            }
            </script>
    </head>
</html>


Looping:

	-for loop
	-while
	-do...while
	-special loop
		(foreach)
Examp:
<html>
    <head>
        <script>
     //example of for..in or for..of 
     var person={"name":"Dinesh","Course":"dotnet","age":23};

     //loop throug all the prop of person object

     for(var p in person){
         document.write("<p style=color:red;>"+p+ "="+person[p]+"</p>");
     }

     //Array with for...of
     let greet="Hello we are using special looping...";
     for(let s of greet){
         document.write(s);
     }
            </script>
    </head>
</html>


-JS function :JS function are used to perform operations , we can call JS function many times to resuse the code. 
	-JS fucntion has reusabilty
	-JS having less coding

JS function Syntax:
==================
function function_name(arg`1......arg2.....argN)
{


}

Example:
<html>
    <head>
        <script>
            function Hello()
            {
                alert('hi this is a function in JS');
            }
            function sum(num1, num2){
                var total=num1+num2;
                document.write(total);
            }
            Hello();
            sum(20,3);
            </script>
    </head>
    <body>

    <form>
        <input type="button" onclick="Hello()" value="Show me">
        <input type="button" onclick="sum(20,10)" value="Sum me">
    </form>
    </body>
</html>


Default value from Funcction para in JS:
============================
<html>
    <head>
        <script>
            function Hello(name='Dinesh')
            {
                alert('hi this' +name);
            }
          
            Hello();
            Hello('Hritik');
           
            </script>
    </head>
    <body>

    
    </body>
</html>


JS function with object:  the purpose of Function constructor is to create a new function object, it will exeucute the code globally.

Syntax:
new function(arg1......arg2.........)
{
}
================
Example:

<html>
    <head>
        <script>
         var d=new Function("num1","num2","return num1+num2");

         document.write(d(20,3));


         //another one 
         var p=new Function("a","b","return Math.pow(a,b)");
         document.write(p(2,3));
           
            </script>
    </head>
    <body>

    
    </body>
</html>


JS EVENTS: An event is something that hppens when user interaccct with the web page succh when he clicked a link, button, entered text in form all are known events.

Example:

	-onclick()
	-ondblclik()
	-onchange()
	-onmousemove()
	-onmouseover() and many more (32+)


Example:
<html>
    <head>
        <script>
            function Hello()
            {
                alert('hi this is a function in JS');
            }
            function sum(num1, num2){
                var total=num1+num2;
                document.write(total);
            }
            Hello();
            sum(20,3);
            </script>
    </head>
    <body>

    <form>
        <input type="button" onclick="Hello()" value="Show me">
        <input type="button" onmousemove="sum(20,10)" value="Sum me">
    </form>
    </body>
</html>

or Another  Example:


<html>
    <head>
        <script>
          
            </script>
    </head>
    <body>

    <button onmousemove="document.getElementById('cts').innerHTML=Date()">
    Date and time:
    </button>

    <p id="cts"></p>
    </body>
</html>

	
-JS Array and object : JS array is an object, that represent a collection of similar type of elements(similar to c/c++java/.net) .
There are 3 ways to construct an array in JS:
	-By Array Literal
	-By Crating instance of Array (New keyword)
	-By using an Array constructor 

Example:
By Array Literal
====================

<html>
    <head>
        <script>
          var food=["Idli","Dosa","Sambhar","Rasgola"];
          document.write(food[3]);
          //using for loop
          for(i=0;i<food.length;i++){
              document.write(food[i]+"<br>");
          }
            </script>
    </head>
    <body>

    </body>
</html>

By Crating instance of Array (New keyword):

<html>
    <head>
        <script>
         var cts=new Array();
         cts[0]="Hritik";
         cts[1]="Ranjan";
         cts[2]="Kisholay";

         for(var i of cts){
             document.write(i+"<br>");
         }
            </script>
    </head>
    <body>

    </body>
</html>

JS SORT: 

<html>
    <head>
        <script>
      var age=[23,33,44,55,2,36,100];

      age.sort(function (a,b)
      {
          return a-b;
      });
      document.write(age);
            </script>
    </head>
    <body>

    </body>
</html>


JS DOM: (Document Objecct Model): DOM represent the whole html document. when html documents loaded in your browsers , it becomes document object.

you can add dynamic content to your web page using DOM:



Some great Props are:
	
				Anchor
DOCUMENT     		=>	Form 		-> text,textarea,checkbox,radio etc
				Link			



Methods of DOM:
	-write()
	-writeln()
	-getElementById("id");
	-getElementByName()


Example of DOM:
=============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

</head>
<body>
    <script>
        function getValue()
        {
            var name=document.myForm.na.value;
            alert("Welcome !"+name);
        }
    </script>
    <form name="myForm">
        <label>Name:</label>
        <input type="text" name="na" id="na">
        <input type="button" value="Show me" onclick="getValue()">
    </form>
</body>
</html>


DOM WITH getElementByID: this method returns the elements by given id.

Example:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

</head>
<body>
    <script>
        function getValue()
        {
            var name=document.myForm.na.value;
            var n=document.getElementById("nam").value;

            alert("Welcome !"+name);
            alert("Hi"+n);
        }
    </script>
    <form name="myForm">
        <label>Name:</label>
        <input type="text" name="na" id="nam">
        <input type="button" value="Show me" onclick="getValue()">
        <input type="button" value="ByID me" onclick="getValue()">
    </form>
</body>
</html>
=======================================================================================
jQuery:
----------
jQuery is fast, small, lightweight, and very rich feature  of JS library. Its  basically designed for simply the client-side scripting of HTML.

It makes things like DOM traversal and DOM manipulation, event handling, animation, effects, AJAX etc.

-jQuery  is a js lib
-jQuery is easy to learn if you  have basic knowledge of html,css,js.


Why you should learn jQuery ?
	-Light-weight
	-Short Selectors
	-DOM Manipulation
	-DOM Traversing
	-Event Handling
	-Animation
	-Plug-in : pre-inbuilt animation  API.
	-It support cross-browsers (IE, FF,Google, Opera)


jQuery Syntax:
===========
As know you guys, you can selecct any HTML element and perform "action" on them.


$(document).ready() function: (Factory function) : $(document).ready() is an event in jquery that fired or trigged when the whole DOM is fully loaded to be manipulated by jQuery.

$ sign to define /access jQuery 

Example:

Step1: firstly you have to download jQuery or you can CDN to run jquery code.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            alert("Hello this simple example of jQuery....");
        });
    </script>
</head>
<body>
    
</body>
</html>

jQuery with HTML Selector(p):
===================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
                $("p").text("hello Guys ");
            });
            
        });
    </script>
</head>
<body>
    <p>Not loaded yet....</p>
    <button type="button">Replace my text...</button>
</body>
</html>

jQuery class and Id :
==============
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
                $("#cts").hide();
            });
            
        });
    </script>
</head>
<body>
    <h2 id="cts">Welcome in cts session </h2>
    <p id="cts"> hide my text</p>
    <p>By CTS batch</p>
    <button>Click on me </button>
</body>
</html>


jQuery Effects:
==========
jQuery enables us to add effects on a webpage using difff effects:
	-Display Effects
		-hide()
		-show()


		-toggle()
	-Fading Effects
		-fadeIn()
		-fadeOut()
		-fadeToggle()
		-fadeTo()
	-Sliding Effects
		-slideDown()
		-slideUp()
		-slideToggle()
	Other Effects
		-animate()
		-delay()

Example:
Display Effects
		-hide()
		-show()


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("#hide").click(function(){
                $("p").hide();
            });
          
            $("#show").click(function(){
                $("p").show();
            });
        });
    </script>
</head>
<body>
  <p>
      <b>This is a little poem:</b> <br>
      Twinke , twinkle  little start <br>
      How I wonder what you are <br>
      Up above the world so high <br>
      Like a diamond in the sky <br>

  </p>
  <button id="hide">Hide</button>
  <button id="show">Show</button>
</body>
</html>

Toggle example:
---------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
                $("div.d1").toggle(1000);
            });
          
         
        });
    </script>
</head>
<body>
  <button>Toggle me</button>
  <div class="d1" style="border: 2px solid blue; padding:10px; width:250px;">
    <p>
        <b>This is a little poem:</b> <br>
        Twinke , twinkle  little start <br>
        How I wonder what you are <br>
        Up above the world so high <br>
        Like a diamond in the sky <br>
  
    </p>
</div>
 
</body>
</html>

-Fading Effects : fadeIn():
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
               $("#cts1").fadeIn();
               $("#cts2").fadeIn("slow");
               $("#cts3").fadeIn(3000);
            });
          
         
        });
    </script>
</head>
<body>
  <button>Fade in me</button>
  <div id="cts1" style="width:80px; height:80px; display:none;background-color:aqua;"></div>
  <div id="cts2" style="width:80px; height:80px; display:none;background-color:greenyellow;"></div>
  <div id="cts3" style="width:80px; height:80px; display:none;background-color:goldenrod;"></div>
</body>
</html>
-Fading Effects : fadeout():
<!DOCTYPE html>
<html lang="en">
<head>  
   
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
               $("#cts1").fadeOut();
               $("#cts2").fadeOut("slow");
               $("#cts3").fadeOut(3000);
            });        
         
        });
    </script>
</head>
<body>
  <button>Fade in me</button>
  <div id="cts1" style="width:80px; height:80px;background-color:aqua;"></div>
  <div id="cts2" style="width:80px; height:80px; background-color:greenyellow;"></div>
  <div id="cts3" style="width:80px; height:80px; background-color:goldenrod;"></div>
</body>
</html>

-fadeToggle()
<!DOCTYPE html>
<html lang="en">
<head>  
   
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
               $("#cts1").fadeToggle();
               $("#cts2").fadeToggle("slow");
               $("#cts3").fadeToggle(3000);
            });        
         
        });
    </script>
</head>
<body>
  <button>Fade effects me</button>
  <div id="cts1" style="width:80px; height:80px;background-color:aqua;"></div>
  <div id="cts2" style="width:80px; height:80px; background-color:greenyellow;"></div>
  <div id="cts3" style="width:80px; height:80px; background-color:goldenrod;"></div>
</body>
</html>

fadeTo();
==========
<!DOCTYPE html>
<html lang="en">
<head>  
   
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
            $("button").click(function(){
               $("#cts1").fadeTo("slow",0.1);
               $("#cts2").fadeTo("slow",0.4);
               $("#cts3").fadeTo("slow",0.5);
            });        
         
        });
    </script>
</head>
<body>
  <button>Fade effects me</button>
  <div id="cts1" style="width:80px; height:80px;background-color:aqua;"></div>
  <div id="cts2" style="width:80px; height:80px; background-color:greenyellow;"></div>
  <div id="cts3" style="width:80px; height:80px; background-color:goldenrod;"></div>
</body>
</html>
Sliding Effects
		-slideDown()
		-slideUp()
		-slideToggle()

Example:
=====
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
       p{
           padding:15px;
           background-color: cadetblue;
       }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
           $(".up").click(function(){
               $("p").slideUp();
           });     
           $(".down").click(function(){
               $("p").slideDown();
           });    
        });
    </script>
</head>
<body>
 <button type="button" class="up">slide up</button>
 <button type="button" class="down">slide down</button>
 <p>This is slideup and slidedown</p>
 <h1>Not loaded or changed...</h1>
</body>
</html>

Slide toggle:
-----------------
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
       p{
           padding:15px;
           background-color: cadetblue;
       }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
           $(".toggle").click(function(){
               $("p").slideToggle(2000);
           });     
           
        });
    </script>
</head>
<body>
 <button type="button" class="toggle">Toggle up</button>
 
 <p>This is slideup and slidedown</p>
 <h1>Not loaded or changed...</h1>
</body>
</html>

Other Effects
		-animate()
		-delay()

Example:
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
      div{
          background-color: goldenrod;
          height: 100px;
          width: 100px;
          position: absolute;
      }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
           $("button").click(function(){
               $("div").animate({left:'300px'});
           });     
           
        });
    </script>
</head>
<body>
 <button type="button">CTS ANIMATION</button>
 
 <div>

 </div>
</body>
</html>



Another example:

<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
     .box{
          width:100px;
          height: 100px;
          background: #9d7ede;
          margin-top: 30px;
          border-style: solid;
          border-color: blue;
      }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
           $("button").click(function(){
               $(".box").animate({width:"300px"})
               .animate({height:"300px"})
               .animate({marginLeft:"150px"})
               .animate({borderWidth:"10px"})
               .animate({opaccity:0.5});
           });     
           
        });
    </script>
</head>
<body>
 <button type="button">CTS ANIMATION</button>
 
 <div class="box">

 </div>
</body>
</html>

 jQuery -Traversing: jQuery is very powerfull tool whicch provides us a variety of DOM traversal methods .
-------------------------
-eq() 
-filter()
-find()
-is()
-map()
-not()
-slice()

etc

Eample of eq() method:


<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
     .test{
         color:red;
     }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
          
              $("li").eq(2).addClass("test");
              });
    </script>
</head>
<body>

    <div>
        <ul>
            <li>India</li>
            <li>UK</li>
            <li>Aus</li>
            <li>srilanka</li>
        </ul>
    </div>

 </div>
</body>
</html>

Example of filter() :
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
     .test{
         color:red;
     }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
          
              $("li").filter(".middle").addClass("test");
              });
    </script>
</head>
<body>

    <div>
        <ul>
            <li>India</li>
            <li>UK</li>
            <li class="middle">Aus</li>
            <li class="middle">srilanka</li>
        </ul>
    </div>

 </div>
</body>
</html>

Slice methd:
=========
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
     .test{
         color:red;
     }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
          
              $("li").slice(2,5).addClass("test");
              });
    </script>
</head>
<body>

    <div>
        <ul>
            <li>India</li>
            <li>UK</li>
            <li class="middle">Aus</li>
            <li class="middle">srilanka</li>
              <li class="middle">Manipal</li>
            <li class="middle">UAE</li>
        </ul>
    </div>

 </div>
</body>
</html>

jQuery  DOM Manipulation: jQuery provides a collecction of methodd to manipulate DOM in effienty way. you not need to write big ccode to modify the value of any elemnent or HTML element.

JQuery provides methods such as attr(), html(), val() which act us getters to retriving information from DOM.

Example:

html(): this method get the html contents (innerHtml) of the first match elements.

<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
    #div
    {
        margin:10px;padding:12px ;border:2px solid #666;width: 60px;
    }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
        $("div").click(function(){
            var data=$(this).html();
            $("#result").text(data);
        });
    });  
    </script>
</head>
<body>

    <p>Click on the square box</p>
    <span id="result"></span>
    <div id="div" style="background-color:blue;">
    This is blue boxx....
    </div>

 </div>
</body>
</html>
----------------------------------
jQuery dom with replacewith function:

<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
    #div
    {
        margin:10px;padding:12px ;border:2px solid #666;width: 60px;
    }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
        $("div").click(function(){
          $(this).replaceWith("<h1> Welcome in DOM </H1>");
        });
    });  
    </script>
</head>
<body>

    <p>Click on the square box</p>
    <span id="result"></span>
    <div id="div" style="background-color:blue;">
    This is blue boxx....
    </div>

 </div>
</body>
</html>

jquery DOM removing:
==================
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
    #div
    {
        margin:10px;padding:12px ;border:2px solid #666;width: 60px;
    }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){
        $("div").click(function(){
          $(this).remove();
        });
    });  
    </script>
</head>
<body>

    <p>Click on the square box</p>
    <span id="result"></span>
    <div id="div" style="background-color:blue;">    </div>
    <div id="div" style="background-color:red;">    </div>
    <div id="div" style="background-color:green;">    </div>

 </div>
</body>
</html>

jQuery Forms:
===========
<!DOCTYPE html>
<html lang="en">
<head>  
   <style>
    #div
    {
        margin:10px;padding:12px ;border:2px solid #666;width: 60px;
    }
   </style>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js">    </script>
    <script type="text/javascript">
        $(document).ready(function(){ 
            $("form").submit(function(){
                alert("Submitted");
            });
    });  
    </script>
</head>
<body>

   <form action="">
       First Name:<input type="text" name="fname" value="Kisholay">
       <input type="submit" value="Submit">
   </form>

 </div>
</body>
</html>

value method in DOM using form:

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>val demo</title>
  <style>
  p {
    color: red;
    margin: 4px;
  }
  b {
    color: blue;
  }
  </style>
  <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
</head>
<body>
 
<p></p>
 
<select id="single">
  <option>Single</option>
  <option>Single2</option>
</select>
 
<select id="multiple" multiple="multiple">
  <option selected="selected">Multiple</option>
  <option>Multiple2</option>
  <option selected="selected">Multiple3</option>
</select>
 
<script>
function displayVals() {
  var singleValues = $( "#single" ).val();
  var multipleValues = $( "#multiple" ).val() || [];
  // When using jQuery 3:
  // var multipleValues = $( "#multiple" ).val();
  $( "p" ).html( "<b>Single:</b> " + singleValues +
    " <b>Multiple:</b> " + multipleValues.join( ", " ) );
}
 
$( "select" ).change( displayVals );
displayVals();
</script>
 
</body>
</html>

jquery with Json:
=============
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>jQuery.getJSON demo</title>
  <style>
  img {
    height: 100px;
    float: left;
  }
  </style>
  <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
</head>
<body>
 
<div id="images"></div>
 
<script>
(function() {
  var flickerAPI = "https://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";
  $.getJSON( flickerAPI, {
    tags: "mount rainier",
    tagmode: "any",
    format: "json"
  })
    .done(function( data ) {
      $.each( data.items, function( i, item ) {
        $( "<img>" ).attr( "src", item.media.m ).appendTo( "#images" );
        if ( i === 3 ) {
          return false;
        }
      });
    });
})();
</script>
 
</body>
</html>


offical websites : jquery api.jquery.com
--------------------------------------------------------


INTRODUCTION TO BS:Bootstrap :
---------------------------------------------

BS is free-open source and is most popular HTML,CSS,JS framework developed by twitter for creatiing Responsive websites, web app.

It Includes : HTML+CSS+JS=BOOTSTRAP.

What you can do with Bs:
	-you can easily create Responsive web/app
	-you can quickly create multi-column layout with pre-defined classes
	-you can quicly create diff. types form layout
	-you can do a lot as per Front-End developer using BS.

Advantage of it:
-------------------
	-Save a lot of time 
	-Repsonsive features
	-Consistent layout design
	-Easy to use 
	-Compatibale with all the modern browsers: Firefox,Safari,IE, Google .


Setting up BS with Local and CDN:
=========================

Example:

Step1: Download Bootstrap : 
https://getbootstrap.com/docs/5.1/getting-started/download/

Step: you can use CDN in web app:

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

SOME basic Attribute and Components in BS:
--------------------------------------------------------
	-Container
	-Grid System
	-Table
	-List
	-List group
	-Forms
		-horizontal
		-veritical
		-inline form
	-Button
	-button groups
	-Images
	-Cards
	-Media objects
	-Icons
	-Navbar
	-Nav
	-Accordian and many more............

Example with Containers:
-------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<body>
    <div class="container">
        Welcome in Bootstrap
    </div>
    <div class="container-fluid">
        Welcome in Bootstrap
    </div>
</body>
</html>

BS GRID System: provides an easy and powerfull way to create responsive layouts of all shapes and sizes. Its built with flexbox with mobile first apprach.  Normally it provies us 12 column system  (12 col avilable per row) and six default resposive tiers.


Example:

<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<body>
   <div class="row">
       <div class=col-md-3 style="background-color:aqua;">Rollno</div>
       <div class=col-md-3 style="background-color:rgb(21, 168, 58);">Name</div>
       <div class=col-md-3 style="background-color:pink;">Ciity</div>
       <div class=col-md-3 style="background-color:yellow;">Country</div>
   </div>
   <br>
   <hr>
   <div class="container-fluid">
    <div class="row">
        <div class=col-md-12 style="background-color:aqua;"><center>CTs Training 2021-22</center></div>
       
       
    </div>
</div>
</body>
</html>

BS-TABLE:
=========
Example1: basic table 
<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<body>
    <div class="m-4">

   
  <table class="table">
      <thead>
          <tr>
              <th>ID</th>
              <th>Name</th>
              <th>Email</th>
          </tr>
      </thead>
      <tbody>
          <tr>
              <td>A001</td>
              <td>Dilip</td>
              <td>Dilip@gmail.com</td>
          </tr>
          <tr>
            <td>A001</td>
            <td>Dilip</td>
            <td>Dilip@gmail.com</td>
        </tr>
        <tr>
            <td>A001</td>
            <td>Dilip</td>
            <td>Dilip@gmail.com</td>
        </tr>
        <tr>
            <td>A001</td>
            <td>Dilip</td>
            <td>Dilip@gmail.com</td>
        </tr>
      </tbody>
  </table>
</div>
</body>
</html>


BS-LIST:
=======
  <div class="m-4">

   
       <ul class="list-unstyled">
           <li>HOME</li>
           <LI>About</LI>
           <li>Product
               <ul>
                   <li>Mobile</li>
                   <li>Computer Accessories</li>
               </ul>
           </li>
           <li>Contact Page</li>
       </ul>
       <br>
       <ul class="list-inline">
           <li class="list-inline-item">HOME</li>
           <li class="list-inline-item">ABOUT</li>
           <li class="list-inline-item">SEARCH</li>
           <li class="list-inline-item">CONTACT</li>
       </ul>

BS-LIST GROUP:
<body>
    <div class="m-4">

   
       
       <ul class="list-group">
           <li class="list-group-item">HOME</li>
           <li class="list-group-item">ABOUT</li>
           <li class="list-group-item">SEARCH</li>
           <li class="list-group-item">CONTACT</li>
       </ul>
</div>
</body>
BS-Button:
=======
<div class="m-4">

   
      <button type="button" class="btn">Basic button</button>
      <button type="button" class="btn btn-primary">Primary button</button>
      <button type="button" class="btn btn-secondary">Secondary button</button>
      <button type="button" class="btn btn-success">Success button</button>
      <button type="button" class="btn btn-info">Success button</button>
      <button type="button" class="btn btn-warning">Success button</button>
      <button type="button" class="btn btn-danger">Success button</button>
      <button type="button" class="btn btn-dark">Success button</button>
      <button type="button" class="btn btn-light">Success button</button>
      <button type="button" class="btn btn-link">Google button</button>
</div>

BS: FORMS:
 <div class="m-4">

   
    <FORM>
        <div class="form-group">
            <label for="email">Email Address</label>
            <input type="email" class="form-control" placeholder="Enter email here" id="email" name="email">

        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" class="form-control" placeholder="Enter password here" id="pass" name="pass">
            
        </div>
        <button type="submit" class="btn btn-success">Login Me</button>
    </FORM>
</div>

Links: https://getbootstrap.com/docs/5.1/forms/overview/

BS WITH NAV AND PILL BAR:
======================
<!DOCTYPE html>
<html lang="en">
<head>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">
</head>
<body>
    <div class="m-4">

  <nav class="nav">
      <a href="#" class="nav-item nav-link active">Home</a>
      <a href="#" class="nav-item nav-link">About</a>
      <a href="#" class="nav-item nav-link">Family</a>
      <a href="#" class="nav-item nav-link">Contact</a>
  </nav>
</div>
<br>
<nav class="nav justify-content-center">
    <a href="#" class="nav-item nav-link active">Home</a>
    <a href="#" class="nav-item nav-link">About</a>
    <a href="#" class="nav-item nav-link">Family</a>
    <a href="#" class="nav-item nav-link">Contact</a>
</nav>
<br>
<nav class="nav justify-content-end">
    <a href="#" class="nav-item nav-link active">Home</a>
    <a href="#" class="nav-item nav-link">About</a>
    <a href="#" class="nav-item nav-link">Family</a>
    <a href="#" class="nav-item nav-link">Contact</a>
</nav>
<br>
<nav class="nav flex-column">
    <a href="#" class="nav-item nav-link active">Home</a>
    <a href="#" class="nav-item nav-link">About</a>
    <a href="#" class="nav-item nav-link">Family</a>
    <a href="#" class="nav-item nav-link">Contact</a>
</nav>
<br>
<nav class="nav nav-tabs">
    <a href="#" class="nav-item nav-link active">Home</a>
    <a href="#" class="nav-item nav-link">About</a>
    <a href="#" class="nav-item nav-link">Family</a>
    <a href="#" class="nav-item nav-link">Contact</a>
</nav>
<br>
<nav class="nav nav-pills">
    <a href="#" class="nav-item nav-link active">Home</a>
    <a href="#" class="nav-item nav-link">About</a>
    <a href="#" class="nav-item nav-link">Family</a>
    <a href="#" class="nav-item nav-link">Contact</a>
</nav>

<br>
<nav class="nav nav-pills flex-column">
    <a href="#" class="nav-item nav-link active">
        <i class="bi-house-door"></i>Home
    </a>
    <a href="#" class="nav-item nav-link active">
        <i class="bi-person"></i>Profile
    </a>
    <a href="#" class="nav-item nav-link active">
        <i class="bi-envelope"></i>Message
    </a>
</nav>
</body>
</html>

BS NAVBAR:
===========
  <nav class="navbar navbar-expand-lg bg-light">
 
 <nav class="container-fluid">
<ul class="navbar-nav">
<li class="nav-item">
    <a href="#" class="nav-link">Home</a>
</li>
<li class="nav-item">
    <a href="#" class="nav-link">About</a>
</li>
<li class="nav-item">
    <a href="#" class="nav-link">Family</a>
</li>
<li class="nav-item">
    <a href="#" class="nav-link">Contact</a>
</li>
</ul>
 </nav>
</nav> 

BS Flexbox:
---------------
<div class="d-flex p-3 bg-success text-white"j>
       <div class="p-2 bg-info">India</div>
       <div class="p-2 bg-warning">India</div>
       <div class="p-2 bg-primary">India</div>
   </div>
   <br>
   <div class="d-inline-flex p-3 bg-success text-white"j>
    <div class="p-2 bg-info">India</div>
    <div class="p-2 bg-warning">India</div>
    <div class="p-2 bg-primary">India</div>
</div>
<br>
<div class="d-flex flex-row-reverse bg-primary text-white"j>
 <div class="p-2 bg-info">India</div>
 <div class="p-2 bg-warning">India</div>
 <div class="p-2 bg-primary">India</div>
</div>

<br>
<div class="d-flex flex-column"j>
 <div class="p-2 bg-info">India</div>
 <div class="p-2 bg-warning">India</div>
 <div class="p-2 bg-primary">India</div>
</div>
------------------------------------------------------------------------------------------------------------------------

BS-CARD:
  <div class="card" style="width: 18rem;">
        <img src="a.jpg" class="card-img-top" alt="...">
        <div class="card-body">
          <h5 class="card-title">Card title</h5>
          <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
          <a href="#" class="btn btn-primary">Go somewhere</a>
        </div>
      </div>
==========================================================================
Database Concept: 
	
The database is a collection of inter-related data which is used to retrive, insert, delete and update the data in table(database)).
Its also used to organized the data in the form of table,schema, views, reports.

DBMS : (Database Management System) : DBMS is a software package which is used to manage the databases.
For example: SQLSERVER, MYSQL , ORACLE are very popular commerical dbms which is avilable in market now.

Types  of database:
	- There are various  types of Databases

1. Centerlized Database:
2. Distributed Database
	-Homegenous database
	-Hetrogenious database
3. No-sql database (mongoDB,cascandra)
4.Cloud database (AWS/Azure/Google)
5.RDBMS:(MSSQL,MYSQL,ORALCE)
6.NETWORK DATABASE
7. ORDBMS(Object Relational database Management System)
8. Hierarchical database


What is RDBMS: All modern database management like SQL SERVER, mysql, IBM DB2, Oracle and MS access are based on RDBMS.

Its called Relatinal Database Management System because it is based on Relational Model which intevented : E.F Codd.

How to it work:

Data is represent in terms of tuples(rows) in RDBMS.

SOME COMMON Attribute of RDBMS:
	-Table (Relation)
	-Field(Column/Attribute)
	-Record(Rows/Tuples)
	-Data Integrity (Rules and Regulations of database)
		-Entity Integrity 
		-Domain Integrity
		-Referential integrity (Relationship)


Example: 

Id	|   Name		| Marks   (field)
---------------------------------------------------
a0001	| Rajnath                    | 566     (rows)
---------------------------------------------------


MS-SQL SERVER: MS-SQLSERVER is RDBMS, dev by MICROSOFT.
-----------------------
-it is similar to other RDBMS but there SQL SERVER is built on top product because it is no open-source.
-SQL server work on only Windows Evir for more than 20+ years.


USE OF MS SQL SERVER:
	-its main purpose is to build and maintain databases
	-its used to analysze the data using SQL SERVER Analysis Service(SSAS) as Data Science.
	-Its usesd to generate the report using SSRS(Sql server Reporing System)
	-Its used to perfrom ETL(Extract, Transform , Load)
	-Its also used for SSIS(sqL SERVER  Integration service)


SQL SERVER NORMALLY HAVING 2 main Component:
---------------------------------------------------------------------
	- Database Engine
	-SQLOS

SSMS:(Sql Server Management Studio) :SSMS is the main Adminstrive tool for SQL SERVER . It provides us with GUI(bird-eye") view of all the SSQL SERVER Componet.

using this you can perform all the admin task such schedule, create, maintaince,delete etc.


SQL : (Sttrucutred Query Lanaguge) : SQL is just query lang, its not a programming land, its not database system, basically it perform the sql query aggaint your database table.
you need to install any database (MYSQL,ORACLE,SQLSERVER) to handle their query.

SQL is used to performed the operations on the records in database suchh udpating records, inserting new reocrds, deleting existing record, creating table design, modify database and table as per your need.

Sometime SQL is procnouced as "SEE-Quell)

SQL Server Data types: A data type can ensure whicch type of value, data or column or variable can stored in SQL SERVER.

In sql server it may be as:
	a. string data types
		-char(n) : its fixed width char upto : 8000 Chars.
		-varchar(n) : Its variable and size upto : 0 to 8000(varient)  ato z, A TO Z, 0 to 9, specil chars.
		-varchar(MAX) : size uptp 10mb

		-text :upto 2gb
		-nchar() : 4000 char
		-nvarchar() : unicode upto : 4000 chars
		-image() : size upto 2gb  data
	b.Numeric data type:
		-tinyint : 0 to 255
		-smallbit : 32767
		-int  : 11 digit long 
		-bigint : 19 digit
		-float(n) : real values
		-money(Curreny data)
		-decimal(size,p) : 50000.60
	c. Date and time data type:
		-datetime : current data and time of the system.
		-date: date Jan 1, 0001 to Dec 31 9999.
		-time: you can store time only :hh:mm:ss:ss

SQL DATABASE:
	-Create database
	-Drop a database
	-Rename database
	-Select database

Example:

CREATE DATABASE Raushan
--create database
Create database MittleDB
--select the current databasee
USE MittleDB

--how to change the database name : modify
ALTER DATABASE MittleDB MODIFY name=HritikDb

--delete permanent your db
drop database HritikDB

HOW TO CREATE A TABLE: 
=====================
Syntax:

Create table "table-name"
(
"col1 -datatypes",
"col2-datatypes"
);


Example:

create table emp(
Id int,
Name char(50),
City varchar(50),
Job varchar(50),
Company varchar(50),
Sal int
);

SQL INSERT Statement:  SQL insert statement is  sued to insert a single record or multiple records in table.

Example:


insert into emp values(1,'Hritik','delhi','SE','cts',50000);
--insert only name,city,sal 
insert into emp(Name,City,Sal) values('Anil','Mumbai',45000)
--multiple records
insert into emp values(2,'Vanshika','delhi','SE','cts',50000),(3,'Rajanth','Chennai','SE','cts',70000)


Drop Table  : Drop command is used to delete a table definition and all data from table permanently.
	-By help command
	Example:

drop table emp

	-By help SSM : right click on table => choose delete => select table =>ok


Delete records: this command is used to delete rows from table based on given condition.

Example:

--delete records 
delete from emp where Id=1

--delete all the records in table
--truncate : it will removee all teh rows from table not  structure table
truncate table emp

SQL SELECT STATEMENT:
========================
	-Select
	-Select Unique
	-Select Count
	-Select top
	-Select In


Example:

--get specific col

select Name,city,Sal from emp

--all the records from table

select * from  emp

--unique reoccrds
select distinct(sal) from emp
--top record in table

select top 2* from emp

--get 60% records from your emp table
select top 60 percent * from emp

--get spcific record from table

select * from emp where city in ('delhi','Chandigarh')

--BETWEEEN op : get data from withing range

select * from emp where sal between 55000 AND 70000;


SQL : LOGICAL OPT (AND,OR,NOT):

SQL Comparsion opt:


--logical example
--AND
select * from emp where Id=2 AND sal>=50000

--OR
select * from emp where Id=2 OR sal>=50000

--NOT
select * from emp where not Id=2

--relational opt (<,>,<=,>=,<>)

--Not equal opt <>

select * from emp where sal<>50000;



SQL RENAME table: SQL sp_rename command is used to rename the existing table.
Example:


sp_rename 'emp','nandan';

SQL copy to : copy all the rows from existing.

Example:


select * into jerlin from nandan;

select * from jerlin

SQL ALTER COMMAND: you can modify/add/drop the column in existing table
===================
	-ADD Column
	-MODIFY Column
	-Drop column

Example:
-- add new col
ALTER table student
ADD Mobile int;

-- modify mobile data type into varchar

alter table student
ALTER column Mobile varchar(50)

--drop existing col
alter table student
drop column Mobile;

SQL SERVER like opt: is used to perform the pattern matching, no need to write full query.
	-expression : like a column or field name
	-pattern : %, _

example:

SQL SERVER AGGREGATE:


--Aggregate function : SUM,MAX,MIN,COUNT,AVG() : it is the expression that represent the column name from which the value you want to calcualte

--sum all the emp sal
select sum(sal) from emp

--avg of all the emp sal
select avg(sal) from emp

--aggreate with alias (virtual column)

select sum(sal) as "Employee Total" from emp

SQL ORDER BY:  Sort the records based on id in ascending or decending.

Example:

select * from  emp order by Name

--decending order 


select * from  emp order by Name desc


GROUP BY: Group by statement in sql server  groups the rows based on their value in one or sev colum. but you can use group by clause using Aggrregate function.

Example:

--grop by
select job,sum(sal) as "Total salary " from emp
Group by job

Having clause: The having clause was added to sql with group by clause, it check withing group by clause.

-----------------


example:

--sum the salary after grouping if sal> 10000 then sum otherwise not sum the total 

--having by
select job,sum(sal) as "Total salary " from emp
Group by job
having sum(sal)<100000;


SQL CONSTRAINT:
------------------------
Contraints are the rules and regullations which we can imposed on our table fields. They are used to maintin constistency of the database. 
in sql server 3 types of constraints:
	-Domain Level constraint : NOT NULL, Check
	-Entity Integrity constain : PRIMARY KEY, UNIQUE
	-Refeerential integrity Constaint: Foreign key


Example:

Example:

CREATE DATABASE Raushan
--create database
Create database MittleDB
--select the current databasee
USE MittleDB

create table emp(
Id int,
Name char(50),
City varchar(50),
Job varchar(50),
Company varchar(50),
Sal int
);
select * from emp


--multiple records
insert into emp values(5,'Vaibhav','Chandigarh','SE','cts',50000),(6,'Mohit','Hyderbad','SE','cts',70000)

--get specific col

select Name,city,Sal from emp

--all the records from table

select * from  emp


select * from emp where Name like 'R%';

or

select * from emp where Name like '%d';

--Aggregate function : SUM,MAX,MIN,COUNT,AVG() : it is the expression that represent the column name from which the value you want to calcualte

--sum all the emp sal
select sum(sal) from emp

--avg of all the emp sal
select avg(sal) from emp

--aggreate with alias (virtual column)

select sum(sal) as "Employee Total" from emp

select * from  emp order by Name

--decending order 


select * from  emp order by Name desc

--update the data 

update emp set sal=90000 where id=5;

select * from  emp
--grop by
select job,sum(sal) as "Total salary " from emp
Group by job

--sum the salary after grouping if sal> 10000 then sum otherwise not sum the total 

--having by
select job,sum(sal) as "Total salary " from emp
Group by job
having sum(sal)<100000;

--constraint

USE MittleDB
select * from s1;

create table s1(id int primary key,
name varchar(50) UNIQUE,
marks int check(marks>500),
City varchar(50) DEFAULT 'Chennai' );

insert into s1 (id,name,marks) values (1,'Hritik',555);
insert into s1 (id,name,marks,City) values (2,'Jerlin',600,'Kochi');
insert into s1 (id,name,marks,City) values (3,'Jerlin',600,'Delhi');


REFERENTIAL Integrity :
-------------------------------

Create table Genders
(genderid int primary key,
address varchar(50),
salary int
)

--person
create table persons
(personid int primary key,
firstname varchar(50),
lastname varchar(50),
genderid int null FOREIGN KEY REFERENCES Genders(genderid)
);
-- first of insert/delete/update values in Genders table after than you can do persons table 

insert into persons values(100,'Hritik','Mittal',1);

SQL SERVER JOIN: As the named "Join" means to combine something.In case of sql sever join means to combinte two or more tables to retrive the records.

As per ANSI SQL there are 5 types of Join:
==============================
-Inner Join(Eque)
-Outer join (Left outer joint, right outer , full outer join)
-Self join
-Cross-join(Cartisian /product join)

Example:
--process 2: 

select e.EmpId,e.Ename,e.sal,d.dname,d.dloc from emp e, dept d
where e.EmpId=d.deptno;

--inner keyword
select e.EmpId,e.Ename,e.sal,d.dname,d.dloc from emp e INNER JOIN  dept d
ON e.EmpId=d.deptno;


OUTER JOIN:
==========



--LEFT OUTER JOIN
select e.EmpId,e.Ename,e.sal,d.dname,d.dloc from emp e LEFT OUTER JOIN  dept d
ON e.EmpId=d.deptno;
--RIGHT OUTER JOIN
select e.EmpId,e.Ename,e.sal,d.dname,d.dloc from emp e RIGHT OUTER JOIN  dept d
ON e.EmpId=d.deptno;

--FULL OUTER JOIN
select e.EmpId,e.Ename,e.sal,d.dname,d.dloc from emp e full OUTER JOIN  dept d
ON e.EmpId=d.deptno;

CROSS-JOIN:
-----------------
select * from st1 CROSS join st2;

SQL SERVER SELF JOIN: A self join is a regular join,, but the table joined with itself.

Example:


select c.Cname as CustomerName, d.Cname as CustomerName2, c.City
from customer c, customer d
where c.CId<> d.CId AND c.City=d.City
order by c.City

SQL - SUB-QUERY:(Nested Query): In sql-server a sub-query can be simply defined as a query within another query. In other words you can say that sub-query is a query that embeded with Where clause of another query.

-A sub-query is sql query  wihtin a query
-A sub-query is called nested that provide data to the eclosing query

Syntax:

select colum_name
	from table1
		where value OPT(select column_name from table2 where condition)


Exmaple:

-Query 1 select ename from emp whose sal are grater than the sal of emp whose empid=1
select * from emp
select Ename,sal from emp where sal>(select sal from emp where EmpId=1)

select Ename,sal from emp where sal=(select sal from emp where EmpId=2)
--Query 2:  Select the details of emp whose sal is equl to the minimum/max sal .

select Ename,sal from Emp where sal=(select max(sal) from emp)

--Query 3 select the 2nd min/max sal of the emp table
select max(sal) from emp where sal in (SELECT max(sal) from emp);


 Date Functions in SQL -server:
------------------------------------
current_Timestamp(): current date and time
-dateadd(): you can add month
-datediff() find out the number days between two date
-datename(): get the specific date
getDate(): current date time

Example:

--Date function

select current_timestamp;
select DATEADD(year,1,'2022/01/08')
select DATEADD(year,-1,'2022/01/08')
select DATEADD(MONTH,1,'2022/01/08')
select DATEDIFF(year,'2014-06-28','2022-01-08')

select DATEDIFF(MONTH,'2014-06-28','2022-01-08')

SELECT datename(year,'2022/01/08')
SELECT datename(MONTH,'2022/01/08')
SELECT datename(DAY,'2022/01/08')
SELECT datename(WEEKDAY,'2022/01/08')
SELECT datename(HOUR,CURRENT_TIMESTAMP)
SELECT datename(Minute,CURRENT_TIMESTAMP)

SELECT datename(Second,CURRENT_TIMESTAMP)
select getdate()
===========================================================================
 C# Programming
---------------------------

Intro of .NET Framework:
-------------------------------

A brief Histroy of .NET framework

.NET is software framework that is designed and developed by Microsoft Company. The first version fo .net framework was 1.0 which came in year 2002. in easy words ,its virtual machine(JVM) for compiling and executing program written in diff language succh c#.net , vb.net, c++,vc++,j#, ts (15 primary  50+ is 3rd party lang) in .net framework.


Its used to develop Form-based app(GUI) , Web based application, and web servicce, Microservices etcc.

.net Framework supports more than 60+ progmming lang in which 11 programming lang are desigend and developed by microsoft , the remaining non-microsoft prod , they are 3rd party lang.

Basically .NET Framework may cat as:

	-Console App (C#)
	-Web Application (ASP.NET/ASP.NET MVC/ASP.NET WEB API)
	-Windows app(vb.net) GUI


==============================
Intro  of C# NET:
============
C# is simple & powerful OOPs developed by Microsoft.
-C# can  be used to create various type of apps: such Web app, window, desktop app, mobile app, cloud based app etc. 

C# is pronounced as "C-Sharp". its develped Anders Hejlsberg 


C# Features:
=========
	-Simple
	-Modern programming 
	-Object oriented
	-Type safe
	-Interoperability (lower verstion to upper version)
	-Scalable and Updateable
	-Component oriented (GUI app like calc, notepad, wordpad)
	-Rich lib (7000+ classes)
	-Fast Speed (you can create, design, code, deply very fast)

Version:
=======
1.0 => 2002

Latest : 7.8 -2021 using VS 2019


Some programming Concepts in C# lang:
=============================
-How to create and run a simple c# code
using System;  //namespae for C#

namespace Kishlay_Demo // maintain all the code 
{
    class Program // class  is a keyword which is used to define class  here program is class name 
    {
        static void Main(string[] args) 

//static : keyword which means object is not req to access static members so it save the memory
//void  : is the reutrn type of the method , it does not returrn any value.
///Main: is the method name , its entry point for any c# program.
// string [] args: is used for command line argument (will discuss later)
        {
            Console.WriteLine("Hello Guys we're using vs 2019");
	// here System is a namepace, Console is the class defined in System namespace, The Write() and WriteLine() method  of Console class which isused to write the text on the console (dos screen)
    }
}




	-variable  : In C# , variables will represent storage loc and each variable has particularr type that determines what type of  value can  be  storedd in variable.

Syntax:


[data-type] [variable_name]
or
[data type] [variable_name]=[value];

Example:

int a;

a=19;

Example;
 class Program
    {
        static void Main(string[] args)
        {
            int a, b, c;
            a = 90;
            b = 20;
            c = a + b;
            Console.Write(c);
        }


	
	-Data types : A data type specifies the types of data that a varible can store such int, float, chars, string etc.

In C# we have diff types of Data types:
	1. Pre-defined Data tpes(int,bool, float)
	2. User defineed (Struct, Enum)
	3.Pointer Data types (Delegate)
	4. Reference Data types:
		-Pre-defined (Objects, Strings)
		-User defined (Classes, Interface)

Example:
======
using System;

namespace Kishlay_Demo
{
    class Program
    {
        static void Main(string[] args)
        {
            int number = 10;

            string name = "Rajanth";
            double per = 90.3;

            char Gender = 'M';
            bool isAvil = true;
            Console.WriteLine("Number:" + number);
            Console.WriteLine("Name:" + name);
            Console.WriteLine("percentage {0}", per);
            Console.WriteLine("Gender:" + Gender);
            Console.WriteLine("Boolean value:{0}", isAvil);
        }
    }
}

Operators: In c# the Operator is a programming element that specifies what kind of operation needs to perform on operands or variable. : + is opt that act upon the operands : a+b.

in C# we have diff type of Opt:
	-Arithmetic opt
	-Relational opt
	-Logical opt
	-Assignment opt
	-Conditonal opt(ternary opt) 


Example of Arithmetic opt:
===================

using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
           int result;
           int x=20,y=10;
           result=(x+y);
           Console.WriteLine("Addition:"+result);
           result=(x-y);
           Console.WriteLine("Sub:"+result);
        }
    }
}


Example : Relational opt (<,>,<=,>=,!=)
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
          bool result;
           int x=20,y=10;
           result=(x==y);
          Console.WriteLine("Equal to opt:"+result);
           result=(x>y);
            Console.WriteLine("Grater than opt:"+result);
        }
    }
}

Logical opt:(And,or,Not) : &&,||, !)


Example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
           int x=20,y=10;
           bool a=true, result;
         //and opt
         result=(x<=y) && (x>10);
         Console.WriteLine("And opt :"+result);
         //Or opt
          result=(x>=y) || (x<5);
          Console.WriteLine("OR opt :"+result);
          //not opt
          result=!a;
          Console.WriteLine("Not opt"+result);
        }
    }
}

	-Control Statement: Control statement enable us to specify the flow of program control, i.e. the order in which instructions in a program must be executed at given condition.
There are 4 types of control statement in c#.net :
	-Decision making (If statement)
	-Selection statement (switch)
	-Iteration statement (Looping)
	-Jump statement (break,continue, goto)

C# if statement:
------------------
Syntax:
if(expression)
{
	//statement or code
}

example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
           Console.WriteLine("Enter the age:");
           int age=int.Parse(Console.ReadLine());
           if(age>15){
               Console.WriteLine("The peple of India can take covid-19 vacc...");
           }
        }
    }
}


C# if else statement:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
           Console.WriteLine("Enter the age:");
           int age=int.Parse(Console.ReadLine());
           if(age>15){
               Console.WriteLine("The peple of India can take covid-19 vacc...");
           }
           else
           {
               Console.WriteLine("you are not eligible for vaccination.");
           }
        }
    }
}

C# if...else if statement:
---------------------------
Syntax:


if(condi1)
{
	//statement to be executed if con1 is true
}
else if(condi2)
{
	//statement to execute if condi2 is true
}
else 
{
statement to execute if all conditions are false
}

Example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
           Console.WriteLine("Enter the age:");
           int age=int.Parse(Console.ReadLine());
          if(age==10){
        Console.WriteLine("age is equl to 10");
          }
          else if(age>10){
              Console.WriteLine("age grater than 10");
          }
          else {
              Console.WriteLine("age value is less than 10");
          }
        }
    }
}


Switch statement:

==============
switch(variable/expression)
{
case value1:
//statement1;
break;
case value2:
//statement2;
break;
default:
//statement to execute if no case matches...
break;
}

Example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
           Console.WriteLine("Enter the age:");
           int age=int.Parse(Console.ReadLine());
       switch(age){
           case 10:
           Console.WriteLine("you are child");
           break;
           case 20:
           Console.WriteLine("you are young");
           break;
           case 30:
           Console.WriteLine("you are matured...");
           break;
           default:
           Console.WriteLine("Not known......");
           break;
       }
        }
    }
}

Looping:
=======
	-Entry Controlled Loop 
		-For loop 
		-While loop

	-Exit Controlled 
		-do...while loop
	-Special loop 
		-foreach 

For loop:
------------
syntax:


for(initialization; condition; iterator(incr/dec)
{
	//statement to be executed
}



example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
        for(int i=1;i<=4;i++){
            Console.WriteLine("i value {0}",i);
        }
          
      
        }
    }
}



C# while loop:
===========
syntax:

while(bool_expression)
{
statement to be executed...
}

using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
       int i=1;
       while(i<=5){
           Console.WriteLine(i);
           i++; //i+=1, i=i+1
       }
          
      
        }
    }
}


C# Do...while:
==========
Syntax:

do
{
//statement
}
while(condition);

Example:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
       int i=1;
       do
       {
           Console.WriteLine(i);
           i++;

       }while(i<=5);    
          
      
        }
    }
}

C# Foreach : is useful for an array or collection object to execute the block of statemnet repeatedly.

Sytnax:

foreach(local variable IN Collection/Array object)
{

}
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        
      string [] n=new string[3] {"Rajanth","Kisholay","Jerlin"};
      foreach(string i in n){
          Console.WriteLine(i);
      }
      
        }
    }
}

Jump statement:
	-break
	-continue
	-goto : Goto is also known as jump statement,its used to transfer control to the other part of the program ,its unconditionally jumps to the spcified Label.

Example:

using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
        for(int i=1;i<=10;i++){
            if(i==5){
                goto finish;
            }
            Console.WriteLine("i value :{0}",i);
        }
        //dec Label
        finish:Console.WriteLine("Loop is end....");        
      
        }
    }
}


	-Methods(Function) :  A large C# program is divided into basic building blocks called as function. A function is block of code that has signature. in c# a function is allso known as method, is seprate3 code block and that contains a series of method or function must be dec either in class or struct.

Generally, methods are useful to improve code resuabilty by reducing code duplication.

Syntax:

class class_name
	{
	<access_specifer> <return_type> Method_name()
	{
	
	}
or
<access_modifier> <return_type> Method_name(<para1...,para2.........paraN>)
	{
	//funcction body
	//return statement
}

Some important point:
=================
	-Function name: its a unique name that is used to make a function call.
	-Return type: is used to specify the data type fo function return value.
	-Body : its a block that contains executbale code
	-Access Spcifier/Modifier : is used spcify function accessibilty in the app.
	-Parameteres: Its a liist of argumnent or para that can be pass to the function during th call.

Simple Method:
============
using System;

namespace SagarDemo
{
    class TestMethod
    {
        //dec method 
        public void Show()
        {
            Console.WriteLine("Welcome in method/function in c#");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
       
            // object to call your method of test class
            TestMethod t=new TestMethod();
            t.Show();      
      
        }
    }
}



Method with para:
=============

using System;

namespace SagarDemo
{
    

    class Program
    {
        static void Main(string[] args)
        {
       
           //call your function
           Program p=new Program();
           string r=p.Details("Jerlin",23);
           Console.WriteLine(r);
           Console.WriteLine(p.Details("Rahul",23));     
      
        }
        //dec your method
        public string Details(string name, int age){
            string res=string.Format("Name :{0}, Age:{1}",name,age);
            return res;
        }
    }
}


C# Function with return type:
=======================
Example:
using System;

namespace SagarDemo
{
    class Simple
    {
        public int AddSum(int a, int b){
            return (a+b);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
           Simple s=new Simple();
           Console.WriteLine(s.AddSum(20,2));
        }
    }
}

C# Static method:
=============

Example:

using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
          //call your function
         
           string r=Details("Jerlin",23);
           Console.WriteLine(r);
              
      
        }
        //dec your method
        public static string Details(string name, int age){
            string res=string.Format("Name :{0}, Age:{1}",name,age);
            return res;
      }
    }
}


C# Pasing Parameters to Method:
=========================
	-Pass by value (Value Parameter) : "input parameters"
	-Pass by Ref (Ref para)  : "input/output"


Example of Value Paramter:
using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
          
          int x=10;
          Console.WriteLine("Value before calling : {0}",x);
          Test(x);
          Console.WriteLine("Value after the calling method:{0}",x);
      }
      //pass by value
      public static void Test(int a){
          a*=a; //+,-

          Console.WriteLine("Value inside a method:{0}",a);
      }
    }
}


Another example of pass by value : swap two number

using System;

namespace SagarDemo
{
    class Program
    {
        static int a=200;
        static int b=100;

        static void Main(string[] args)
        {
          
          Console.WriteLine("Before swaping");
           Console.WriteLine("A is:"+a);
          Console.WriteLine("B is :"+b);
          //call your method
          Myswap(a,b);
      }
      static void Myswap(int a, int b){
          int t;
          t=a;
          a=b;
          b=t;
          Console.WriteLine("After swaping");
          Console.WriteLine("A is:"+a);
          Console.WriteLine("B is :"+b);
      }
    }
}


Example:

Pass by Ref (Ref para)  : "input/output" : you need to use REF keyword within a para.


Example:
=========
using System;

namespace SagarDemo
{
    class Program
    {
        static int a=200;
        static int b=100;

        static void Main(string[] args)
        {
          
          Console.WriteLine("Before swaping");
           Console.WriteLine("A is:"+a);
          Console.WriteLine("B is :"+b);
          //call your method
          Myswap(ref a,ref b);
      }
      static void Myswap(ref int a, ref int b){
          int t;
          t=a;
          a=b;
          b=t;
          Console.WriteLine("After swaping");
          Console.WriteLine("A is:"+a);
          Console.WriteLine("B is :"+b);
      }
    }
}

Another example:

using System;

namespace SagarDemo
{
    class Program
    {
        static void Main(string[] args)
        {
          
          int x=10;
          Console.WriteLine("Value before calling : {0}",x);
          Test( ref x);
          Console.WriteLine("Value after the calling method:{0}",x);
      }
      //pass by value
      public static void Test(ref int a){
          a*=a; //+,-

          Console.WriteLine("Value inside a method:{0}",a);
      }
    }
}



Method overloading: C# allows us to create more than one method with same name, but diff para or arugment.Its known mehtod overloading.

Syntax:


Add()
Add(int)
Add(int, int)
Add(int, char)
Add(string,float) 

Example:

using System;

namespace SagarDemo
{
    public class Calculatation
    {
        public static int Add(int a, int b){
            return a+b;
        }
        public static int Add(int a, int b, int c){
            return a+b+c;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
          
         Console.WriteLine(Calculatation.Add(20,3));
         Console.WriteLine(Calculatation.Add(20,5,6));
      }
      
    }
}


===============
	-Array :

Array are useful for storing mulitple elements of the same data type at ccontiguous memory location and array always store the with specific index number.

Syntax:

type [] array_name;  

here type is nothing but data type of elemnet to store in array, and array_name is jsut represent an array name.


For example:

//store only int value

int [] number;
///store only string

string [] name;

//store only double 
double [] marks;


C# Array Initialization : 
dec and ini

int [] arr2=new int[] {1,22,34,45,55};

//another way

int [] arr3={20,33,44,55,66};

int [] arr4=new int[5] {20,22,33,44,55};

int [] scores=arr4;

Example:
========
using System;

namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         
         int [] arr=new int[5] {10,22,33,44,55};
         //get first element
         Console.WriteLine("Value :{0}",arr[0]);
         int [] arr1=new int[5];
         arr1[0]=20;
         arr1[1]=90;
         arr1[2]=22;
         arr1[3]=44;
         arr1[4]=900;
         //foreach to traversing the array 

         foreach(var i in arr1){
             Console.WriteLine(i);
         }
      }
      
    }
}


 C# Array Types:
=============
- Single  Dimensional Array
-Multi-Dim (2d, 3D)
-Jaaged Array(Array of Array)


Sorting with Array:
--------------------------
using System;

namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         
         int [] arr=new int[5] {10,22,33,44,5};
         //get first element
         Console.WriteLine("Before sorting ");
         foreach(var i in arr){
             Console.WriteLine(i);
         }
         //sorting
         Array.Sort(arr); //no need to use bubble and selection 
           Console.WriteLine("After sorting ");
         foreach(var i in arr){
             Console.WriteLine(i);
         }
         //Descending order or reverse order
         Array.Reverse(arr);
           Console.WriteLine("After Decending order ");
         foreach(var i in arr){
             Console.WriteLine(i);
         }
      }
      
    }
}

2D array: (Rectangular Array) : The multi-Dim array contain more than one row to store the values. Its also known as Rectangular Array because its each row length is same. it can be 2d,3D, more....
------------
Syntax:

//Create a two-dim array for rows and cols

int [,] arr=new int[4,2] // c++ int a[2][2];

//Create 3D array : 4,2,3

int[,,] arr1=new int[4,2,3];

Simple example with 2D array:
----------------------------------------
Example:

using System;

namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         
         //dec and  initialization 2D
         int [,] array2D=new int[3,2] { {4,5},{5,10},{4,8}};
         //3d 
         int [,,] array3D=new int[2,2,3]{{{1,2,3},{4,5,6}},{{7,8,9},{10,11,12}}}; 
         Console.WriteLine("--------two dim array elements ----------");
         for(int  i=0;i<3;i++){
             for(int j=0;j<2;j++){
                 Console.WriteLine("a[{0},{1}]={2}",i,j,array2D[i,j]);
             }
         }
         //3d array
          for(int  i=0;i<2;i++){
             for(int j=0;j<2;j++){
                 for(int k=0;k<3;k++){
                 Console.WriteLine("a[{0},{1},{3}]={3}",i,j,k,array3D[i,j,k]);
             }
         }
      }
      
        }
    }
}

C# Jagged Array: In C# jagged array is an array whose element are arrays with diff dimensions and sizes , sometimes a jagged is  called "array of arrays".
-----------------------
Dec of jagged:

//int [][] jarray=new int[2][];

jarray[0] new int[] {}
jarray[1]=new int[] {}
jarray[2]=new int[] {}

Example:

using System;

namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         
         int [][] arr=new int[3][];
         arr[0]=new int[]{10,20,30,40,50};
         arr[1]=new int[]{2,4,5};
         arr[2]=new int[]{2,4,6,8,10,12};
         //traverse jagged array
         for(int i=0;i<arr.Length;i++){
             for(int j=0;j<arr[i].Length;j++){
                 Console.WriteLine(arr[i][j]+" ");
             }
         }
         }
         
    }
}

Command line Arguments:
===================
As you know argument that are passed by command line known as command line arg. we can send arguments to the Main() while executing the code.
the string args variable contains all the value passed from the command line.

using System;

namespace Kishlay_Demo
{
    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Arguments:" + args.Length);
            Console.WriteLine("Supplied Args :");
            foreach (Object ob in args)
            {
                Console.WriteLine(ob);
            }
        }
    }
}

How to Run :

open command prompt:
- type
	csc <filename.cs>
	filename <space> <input values/strings/int>


Add two matrix in M-D array:
======================
using System;

namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         
      int i=0;
      int j=0;
      int row=2;
      int col=2;
      int[,] Matrix1=new int[row,col];
      int[,] Matrix2=new int[row,col];
       int[,] Matrix3=new int[row,col];
         Console.WriteLine("Enter the elements for Matrix1:");
         for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                 Matrix1[i,j]=int.Parse(Console.ReadLine());
             }
         }

           Console.WriteLine("Enter the elements for Matrix2:");
         for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                 Matrix2[i,j]=int.Parse(Console.ReadLine());
             }
         }
         //Addition of matrix
          for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                Matrix3[i,j]=Matrix1[i,j]+Matrix2[i,j];
             }
         }
         //print matrix 1 and matrix 2 elements

 Console.WriteLine("Matrix1:");
         for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                Console.WriteLine(Matrix1[i,j]+"\t");

             }
             Console.WriteLine();

         }
Console.WriteLine("Matrix2:");
         for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                Console.WriteLine(Matrix1[i,j]+"\t");

             }
             Console.WriteLine();
             
         }
//Additio of matrix
Console.WriteLine("\n Addition of Matrix1 and Matrix 2:");
         for(i=0;i<row;i++){
             for(j=0;j<col;j++){
                Console.WriteLine(Matrix3[i,j]+"\t");

             }
             Console.WriteLine();
             
         }

         }
         
    }
}


Collections:
========

In C#(Java) , the collection is a class that is useful to manage a group of object in very flexible mananer to perform various opt such insert, update, delete, fetch, search, using collection you ccan mange the object item in dynamic wasy(you can say collection is dynamic array).

In C# the collection may be :
	-Non-Generic :In non-generic collections are useful to store the element of diff data types these are under :System.Collections namespace.
	-ArrayList
	-Queue
	-Stack
	-Hashtable
	-Generic : In Generic will enforce you a type safty and we can store only element which is defined by user, it comes under System.Collections.Generic namespace
	-List<string/int/double>
	-Queue()
	-Stack()
	-SrotedList()
	-Dictionary(key-value)


ArrayList: is class that is similar to array, but it can be used to store the value of various type and it scaleup the size dymaically.
Example:

using System;
using System.Collections;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         ArrayList a=new ArrayList();
         a.Add("Punjabi");
         a.Add("Telgu");
         a.Add("Bengali");
         a.Add("Tamil");
         a.Add("Hindi");
         a.Add(20);
         //fetch
         foreach(var i in a){
             Console.WriteLine(i);         }        
        
         }
         
    }
}

ArrayList havig some method to manage the collection:
==========================================
	-Add
	-AddRange
	-Remove
	-RemoveAt
	-RemoveRange()
Example of AddRange():
using System;
using System.Collections;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         ArrayList a=new ArrayList();
         a.Add("Punjabi");
         a.Add("Telgu");
         a.Add("Bengali");
         a.Add("Tamil");
         a.Add("Hindi");
         a.Add(20);
         //creating another list 
         ArrayList arr1=new ArrayList() {100,"Rajanath"};
         //adding this
         a.AddRange(arr1);
         
         foreach(var i in a){
             Console.WriteLine(i);         }        
        
         }
         
    }
}

ArrayLIst with Insert and Insert Range():
==============================

using System;
using System.Collections;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         ArrayList a=new ArrayList();
         a.Add("Punjabi");
         a.Add("Telgu");
         a.Add("Bengali");
         a.Add("Tamil");
         a.Add("Hindi");
         a.Add(20);
       //inserting the element in the list
       a.Insert(1,"Athira");
       a.Insert(2,"Hritik");
//inset with range
    ArrayList arr1=new ArrayList() {200,"Rahul"};
    a.InsertRange(3,arr1);
         foreach(var i in a){
             Console.WriteLine(i);         }        
        
         }
         
    }
}

ArrayList with Remove and Remove Range():
----------------------------------------------------------
using System;
using System.Collections;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
         ArrayList a=new ArrayList();
         a.Add("Punjabi");
         a.Add("Telgu");
         a.Add("Bengali");
         a.Add("Tamil");
         a.Add("Hindi");
      //removing  single value
       // a.Remove("Telgu");
        //removing with index
        //remving with range
        a.RemoveRange(1,2);
      //  a.RemoveAt(2);
         foreach(var i in a){
             Console.WriteLine(i);         }        
        
         }
         
    }
}

C# List:  List<T> class is used to store and fetch element. it can have duplicate elements.

Example:
using System;
using System.Collections.Generic;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
        List<int> a=new List<int>();
        a.Add(10);
        a.Add(20);
        a.Add(40);
        //string 
        var names=new List<String>();
        names.Add("Raju");
        names.Add("latha");

         foreach(var i in a){
             Console.WriteLine(i);         
             }        
        
         
         //fetch
         foreach (var item in names)
         {
             Console.WriteLine(item);
         }
         
    }
}
}
Note: you can use List method: add, AddRange, remove, RemoveAt,RemoveRange etc
================================================================

C# HashSet:<T> : this class used to store , remove,view element. It does not store the dup⁮licate element.

Example:
using System;
using System.Collections.Generic;
namespace SagarDemo
{
   
    class Program
    {
        static void Main(string[] args)
        {
        var a=new HashSet<string>();
        a.Add("Ankit");
        a.Add("Priyanka");
        a.Add("Ankit");
        a.Add("Ranjeet");

         foreach(var i in a){
             Console.WriteLine(i);         
             }        
                      
             }}
}

C#  HashTable: is used to store a collection element in key/value pairs of diff types. its similar to dictinary.
===========

using System;
using System.Collections;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
        Hashtable a=new Hashtable();
        a.Add("name","Ankit");
       a.Add("msg","Welcome");
       a.Add("site","google");
        //fetching Hasttable value
        foreach(DictionaryEntry i in a){
            Console.WriteLine("Key ={0}, Value={1}",i.Key,i.Value);
        } 
        
         
         
         
    }
}
}


C#-SortedSet: can be used to store ,remove or view element . It maintain acendig  order , and it does not support duplicate element.

Example:
using System;
using System.Collections.Generic;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
      var a=new SortedSet<string>();
       a.Add("Books");
       a.Add("Pen");
       a.Add("Apple");
       a.Add("Tea");

      foreach(var i in a){
          Console.WriteLine(i);
    }
        }
    }
}


C# - Stack: is useful for representing a collection of obejct that store elements in LIFO(Last in First out) style the elemnt that added will be first to comeout.
By using Push() and Pop()/Peek() we can manage.

==========
using System;
using System.Collections.Generic;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
      var a=new Stack<string>();
      a.Push("Java");
      a.Push("C++");
      a.Push("Python");

      foreach(var i in a){
          Console.WriteLine(i);
    }
    //get only top  elemnt
    Console.WriteLine("Peek element:"+a.Peek());
    Console.WriteLine("Delete an item :"+a.Pop());
    Console.WriteLine("after delete Peek element:"+a.Peek());
        }
    }
}

C#-Queue:  FIFO 

By using Enqueu() and Dequeue() you can add ore delete elements from queue.

Example:
using System;
using System.Collections;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
      Queue a=new Queue();
      a.Enqueue("Java");
      a.Enqueue("C++");
      a.Enqueue("Python");
      a.Enqueue(200.5f);
      a.Enqueue(null);
  
   Console.WriteLine("Total elemnet:"+a.Count);
   Console.WriteLine("Contain elemnet:"+a.Contains("Pythofn"));
       foreach(var i in a){
          Console.WriteLine(i);
    }
        }

    }
}

C# Dictionary :  <TKey,TValue> class uses the concept of Hastable, it store the vlaue on basis of key.
It can contain unique key only.

Example:
using System;
using System.Collections.Generic;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
            Dictionary<string,string> names=new Dictionary<string, string>();
            names.Add("1","Ranjeet");
            names.Add("2","Delhi");
            names.Add("Job","Manager");
            names.Add("Salary","500000");

            // get the value dictnary
            foreach(KeyValuePair<string,string> kv in names){
                Console.WriteLine(kv.Key+" "+kv.Value);
            }
        }

    }
}
Remove wiith Dictionary :
===================

using System;
using System.Collections.Generic;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
            Dictionary<string,string> names=new Dictionary<string, string>();
            names.Add("1","Ranjeet");
            names.Add("2","Delhi");
            names.Add("Job","Manager");
            names.Add("Salary","500000");

            // get the value dictnary
            foreach(KeyValuePair<string,string> kv in names){
                Console.WriteLine(kv.Key+" "+kv.Value);
            }
            //remove element 
            names.Remove("2");
            // get the value dictnary
            foreach(KeyValuePair<string,string> kv in names){
                Console.WriteLine(kv.Key+" "+kv.Value);
                //clear 
                names.Clear();
                Console.WriteLine("Total namees:"+names.Count);
            }
        }

    }
}


Sort a Dictinary Element : LINQ method
===============================
using System;
using System.Collections.Generic;
using System.Linq;
namespace SagarDemo{
       class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int,string> names=new Dictionary<int, string>();
            names.Add(1,"Ranjeet");
            names.Add(3,"Arvind");
            names.Add(2,"Dinesh");
            names.Add(4,"Hritik");
    //sort 
    foreach(KeyValuePair<int,string> kv in names.OrderBy(s=>s.Value)){
        Console.WriteLine(kv.Key+ " "+kv.Value);
    }
           
  }
    }
}
-----------------------------------------------------
Note: maps but c# does not support
--------------------------------------------------

Oops Concept:
	-Class 
	-Objecct
	-Constrctor
	-Desctructor
	-Inheritance
	-Interface
	-Polymorphism
	-Abstraction and more...............

What is Oops Concept:
================
	-OOPs is style that is associated witih the concept of a CLASS, object and others concept that revling around these two and its support such Inheritancce, Poly, Abstraction and Encapsulation etc.

In class based oops is nothing  paradigm , where object refer to a particular instance of the class , where the object can be combiination of a variable, function and more.


A good understanding of oops concepts that can be help you to design, code, test ,deply the application as per req of client.


Class : Its means everything in C#/Java is an object, these objects are created from classes whicch are either user-defined or in built. Classes are also called Templates because they provide us basic framework of an object.

Syntax:

class class_name
{
	//variable dec
	//methods
}

Example:

Before  class concept i would like to discuss C# Access Modifier(Specifier):

	-Private
	-Public
	-protected (derived class)
	-internal	(default)
	-protected internal (assembly dll)


using System;
using System.Collections.Generic;
using System.Linq;
namespace SagarDemo{
    
       class Program
    {
        //DEC data member and method
        int id;
        String name;

        static void Main(string[] args)
        {
            Program p=new Program();
            p.id=100;
            p.name="Kisholay";
            Console.WriteLine("Id:"+p.id);
            Console.WriteLine("Name:"+p.name);
           
        }
    }
}

Example 1: having Main() method in another class



using System;
using System.Collections.Generic;
using System.Linq;
namespace SagarDemo{
    
    class Student
    {
   public int id;
    public String name;
    }
       class Program
    {           

        static void Main(string[] args)
        {
          Student p=new Student();
            p.id=100;
            p.name="Kisholay";
            Console.WriteLine("Id:"+p.id);
            Console.WriteLine("Name:"+p.name);
           
        }
    }
}


Access Modifer:
=============
public and private  modifier:
===================
using System;
using System.Collections.Generic;
using System.Linq;
namespace SagarDemo{
    
    class Student
    {
   public int id;
  private int  age;
    }
       class Program
    {           

        static void Main(string[] args)
        {
          Student p=new Student();
            p.id=100;
           p.age=23;
            Console.WriteLine("Id:"+p.id);
            Console.WriteLine("Age:"+p.age);
           
        }
    }
}

Protected  :
==========
using System;
using System.Collections.Generic;
using System.Linq;
namespace SagarDemo{
    
    class Student
    {
        protected int num1;
  
    }
       class Program:Student
    {           
        public int num2;

        static void Main(string[] args)
        {
         Program p=new Program();
         p.num1=100;
         p.num2=90;
         Console.WriteLine("STudent obj :{0}",p.num1);
         Console.WriteLine("Program obj: {0}",p.num2);
        
           
        }
    }
}

interal : Current Assembly 


using System;

namespace SagarDemo
{

class User
{

internal string Name;
internal string Loc;
internal int Age;
internal void GetUser()
{
    Console.WriteLine("Name:{0}",Name);
    Console.WriteLine("Loc:{0}",Loc);
    Console.WriteLine("Age:{0}",Age);
}
 

}
class Program{
    static void Main()
    {
        User u=new User();
        u.Name="Kishlay";
        u.Loc="New Delhi";
        u.Age=23;
        u.GetUser();

    }
}
}
Protected Internal access MOdifier:  the protected intrnal modifer is used to specfiy that acess is limited to the current assembly or types derived from the another assembly.


using System;

namespace SagarDemo
{

class User
{

protected internal string Name;
protected internal string Loc;
protected internal int Age;
protected internal void GetUser()
{
    Console.WriteLine("Name:{0}",Name);
    Console.WriteLine("Loc:{0}",Loc);
    Console.WriteLine("Age:{0}",Age);
}
 

}
class Program{
    static void Main()
    {
        User u=new User();
        u.Name="Kishlay";
        u.Loc="New Delhi";
        u.Age=23;
        u.GetUser();

    }
}
}

C#- Constructor:
============
-IN C# , constructor is a special method which invoked automatically at the time of object creation. we can define the constructors in c# are special type of method or function that automatic execute whenever we create an instance(obj) of that cclasss.
	-The constrs are responsible for two thing:
		a. one is the object iniitializaation
		b. Second one is memory allocation



There are diff types of contrs:

	- Default() : if we create a consstructor without having any para the we will call its default.
	-Parameterized() : if we create a constr. with alteast one para, then we call it para constructor.
	-Copy con() : The constructor which create an objecct by coping variables from another object is called copy constr.
	-Static consc() : A static constr is used to initialzie static fields  of the class and to write code that need to be executed only once through out the execution.
	-Private () : Private Constr() is special instancce constr presetn in c#.net  is used in class that can be contain only static members. , the private constr is always declared using by private keyword.


Simple example with Constr:
=====================


using System;

namespace SagarDemo
{

public class Employee
    {
        public Employee()
        {
            Console.WriteLine("Welcome I am Constr......")
        }
    }
 

}
class Program{
    static void Main()
    {
Employee e=new Employee();

    }
}
}

Default Constructor:
================
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
        public string name, loc;
        public Employee()
        {
            name = "Rajanth";
            loc = "Mumbai";
        }
    }


    class Program
    {
        static void Main()
        {
            Employee e = new Employee();
            Console.WriteLine(e.name);
            Console.WriteLine(e.loc);

        }
    }
}



Constr with Para:
============
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
        public string name;
        public Employee(string n)
        {

            name = n;
           
        }
    }
    class Program
    {
        static void Main()
        {
            Employee e = new Employee("Kisholay");
            Console.WriteLine(e.name);
           

        }
    }
}

//Write a prgoram to passing the para in constr , eid,eage,eadd, job,loc,mobile you have to displaly value through method.


Copy-Constructor:
=============
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
        public string name, loc;
        public Employee(string n,string l)
        {
            name = n;
            loc = l;
           
        }
        //copy constr
        public Employee(Employee emp)
        {
            name = emp.name;
            loc = emp.loc;
        }
    }
    class Program
    {
        static void Main()
        {
            Employee e = new Employee("Kisholay","Kanpur");
            //another emp obj by coping emp details
            Employee e2 = new Employee(e);
            e2.name = "Rajanth";
            e2.loc = "Shimla";

            Console.WriteLine(e.name + " "+e.loc);
            Console.WriteLine(e2.name + " " + e2.loc);
           

        }
    }
}


Another Example:
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
        public string name, loc;
        public Employee(string n,string l)
        {
            name = n;
            loc = l;
           
        }
        //copy constr
        public Employee(Employee emp)
        {
            name = emp.name;
            loc = emp.loc;
        }
    }
    class Program
    {
        static void Main()
        {
            Employee e = new Employee("Kisholay","Kanpur");
            //another emp obj by coping emp details
            Employee e2 = new Employee(e);
       

            Console.WriteLine(e.name + " "+e.loc);
            Console.WriteLine(e2.name + " " + e2.loc);
           

        }
    }
}



Static Constr:
==========
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
        static Employee()
        {
            Console.WriteLine("I am static constr...");
        }
        //defualt constr
        public Employee()
        {
            Console.WriteLine("Default Constr...., invoked many times......");
        }
        
    }
    class Program
    {
        static void Main()
        {
            Employee e1 = new Employee();
            Employee e2 = new Employee();


        }
    }
}

Private Constructor:
=============
using System;

namespace Kishlay_Demo
{
        public class Employee
    {
      private Employee()
        {
            Console.WriteLine("I am static constr...");
        }
       
        
    }
    class Program
    {
        static void Main()
        {
            Employee e1 = new Employee();
         


        }
    }
}


C# this keyword: is used to  refer to the current instance of  a class, by using this keyword you can pass current instancee of the class a parameter to the other method. basically it maintain distinuguesh between para or varable.

this.instance_variable=para_variable
=============
using System;

namespace Kishlay_Demo
{
    public class Employee
    {
        public string name;
        public Employee(string name)
        {
            this.name = name;
          //  name = n;

        }
    }
    class Program
    {
        static void Main()
        {
            Employee e = new Employee("Kisholay");
            Console.WriteLine(e.name);


        }
    }
}

Inheirtance:
=========
	Inhertance  is process, machnism , tech in which one obj acquires all the props and behaviour of its parent object automatically.

IN such way you can resuse, extend, modify the attribute and behv which defined in the base class, parent ,super class .


How may types of Inheritance in C#.net (C++ )
	-Implementation inheritance(Single /Multi-level)
	-Interface inheritance 

Single inheritance:
=============



using System;
namespace Kishlay_Demo
{
    class A
    {
        public float sal = 9000;
        public void Display()
        {
            Console.WriteLine("Hi ");
        }
    }
    class B : A // b is child of class b
    {
        public float bonus = 9000;
        public void Show()
        {
            Console.WriteLine("I am using simple inheritnace...");
        }
    }

    class Program
    {
        static void Main()
        {
            B b1 = new B();
            b1.Display();
            b1.Show();
            Console.WriteLine("Sal:" + b1.sal);
            Console.WriteLine("Bonus:" + b1.bonus);
        }
    }
}

Multi-Level:
==========

using System;
namespace Kishlay_Demo
{
   public class Holiday
    {
        public void Republic()
        {
            Console.WriteLine("26th Jan 2020");
        }
    }
    public class Athira:Holiday
    {
        public void Hi()
        {
            Console.WriteLine("Hi this is example of M-level inheritancce");
        }
    }
    public class CTS:Athira
    {
        public void cts()
        {
            Console.WriteLine("WFH till JUn-2022");
        }
    }
    // A=>B =>C

    class Program
    {
        static void Main()
        {
            CTS c = new CTS();
            c.Republic();
            c.Hi();
            c.cts();
        }
    }
}





C# Interface: As you know that is multiple-inheritance is not supported in ..net, if you want to inherit props and behavs from several diff classes, .net provide us the special that is known as Interface , its support multiple inheirtanc in dotnet.
=========
Interface: is fully unimplmented class used to for dec a set of operations of an object, so we can define interface as pure abstract class which allow us to define only abstract method.

Abstract method: means a method without body or implementation.


Syntax:

public interface Interface_name
{
	//dec oly
	void Show();
}
public  interface Interface_name
	//void Display();
}

using System;
namespace Kishlay_Demo
{
   interface Welcome
    {
        //dec part
        void Display();
        void Sum();
    }
    class Callme:Welcome
    {
        public void Display()
        {
            Console.WriteLine("hi this is interface method...");
        }
        public void Sum()
        {
            Console.WriteLine("Another method of interface...");
        }
    }

    class Program
    {
        static void Main()
        {
            Callme m = new Callme();
            m.Display();
            m.Sum();
        }
    }
}

Nested Interface:
==============

using System;
namespace Kishlay_Demo
{
   interface Welcome
    {
        //dec part
        void Display();
        void Sum();
    }
    interface B:Welcome
    {
        void method1();
    }
    class Callme:Welcome
    {
        public void Display()
        {
            Console.WriteLine("hi this is interface method...");
        }
        public void Sum()
        {
            Console.WriteLine("Another method of interface...");
        }
        public void method1() { Console.WriteLine("method1"); }
    }

    class Program
    {
        static void Main()
        {
            Callme m = new Callme();
            m.Display();
            m.Sum();
            m.method1();
        }
    }
}
Polymorhims: Means having more than one form.
===========

IN C#.net poly means providing an ablity to take more than one form and its one of the main pillar of OOPS after inheritance, ecapsulation.

Generally Polymorphsim is a combination of two words : Poly and another is morphs. Poly means "Many" and Morph means : "Forms"

It may be two types:
	-Compile time /Early /Static binding  (Method overloading)
	-Run time /Late /Dynamic               (Method overriden)

Example of method overloading:
======================

using System;
namespace Kishlay_Demo
{
   public class Print
    {
        public void Display(string name)
        {
            Console.WriteLine("Hi your name is:" + name);
        }
        public void Display(int age, float marks)
        {
            Console.WriteLine("Age and Marks:" + age+" "+ marks);
        }
    }
    class Program
    {
        static void Main()
        {
            Print p = new Print();
            p.Display("Jeerlin");
            p.Display(23, 98.7f);
        }
    }
}

Method overloading in Inheritance:
=======================

using System;
namespace Kishlay_Demo
{
    class Clas1
    {
        public int Sum(int a, int b)
        {
            return a + b;
        }
        public float Sum(int a, float b)
        {
            return a + b;
        }
    }
    class  Class2:Clas1
    {
        public int Sum(int a, int b, int c)
        {
            return a + b + c;
        }
    }
  
    class Program
    {
        static void Main()
        {
            Class2 ob = new Class2();
            Console.WriteLine("Sum1" + ob.Sum(20, 10));
            Console.WriteLine("Sum2:" + ob.Sum(20, 10.70f));
            Console.WriteLine("Sum3:" + ob.Sum(10, 4, 5));
        }
    }
}

Method overridden:
==============

using System;
namespace Kishlay_Demo
{
   public class Animal
    {
        public virtual void Eat()
        {
            Console.WriteLine("Eating ");
        }
    }
    public class Dog:Animal
    {
        public override void Eat()
        {
            Console.WriteLine("dog eating breads...");
        }
    }
  
    class Program
    {
        static void Main()
        {
            Dog d = new Dog();
            d.Eat();
        }
    }
}


C#-Properties:
==========
	- C# propties does  not have storage location, C# props are extension of fields and accessed liike fields.The prps have acccessors that are to set /get their values .
It can  be used to access a class private field, a private can not be access outside of the class directly so we are forced to use C# props for setting or getting values in private fields throug Property.


Example:

using System;
namespace Kishlay_Demo
{
    public class Employee
    {
        private string name;
        //props
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
    }
  
  
    class Program
    {
        static void Main()
        {
            Employee e = new Employee();
            e.Name = "Kisholay ";
            Console.WriteLine("Name is:" + e.Name);
        }
    }
}


Encapsulation in c#:
=============
	Encapsulation : Encapulation is the concept of wrapping data into single unit,it collect data members and member fuctioons into a single unit called class.

The purpose of encapulation is to prevent alternation of data from outside of the world.
Thsi data can only accessed by getter or setterr function of class or props.


Example: To take example of Banking System.


using System;
namespace Kishlay_Demo
{
   class User
    {
        private string loc;
        private string name;
        public string Location
        {
            get { return loc; }
            set { loc = value; }
        }
        public string Name
        {
            get { return name; }
            set { name = value; }
        }
    }
  
  
    class Program
    {
        static void Main()
        {
            User u = new User();
            //set acccesor will invoke
            u.Name = "Kisholay";
            u.Location = "Hyderbad";
            Console.WriteLine("Name:" + u.Name);
            Console.WriteLine("Loc :" + u.Location);
        }
    }
}

Another example of Encapusulation:
===========================

using System;
namespace Kishlay_Demo
{
  public class Bank
    {
        private double balance;
        public double Balance
        {
            get { return balance; }
            set
            {
                //validation
                if (value < 0)
                {
                    Console.WriteLine("value can not be negative...");
                }
                else
                {
                    balance = value;
                }
            }
        }
    }
  
  
    class Program
    {
        static void Main()
        {
            Bank b = new Bank();
            b.Balance = 1000;
            Console.WriteLine("Bal:" + b.Balance);
            b.Balance = 5000;
            Console.WriteLine("Bal1:" + b.Balance);
        }
    }
}


Abstraction in C#:
================ 
	-Abstraction is a nothing but principle of OOPs, its used to hide the implementation details and display only essential features of the object.


Lets  with Example:


using System;
namespace Kishlay_Demo
{
    public class Laptop
    {
        private string brand;
        private string model;
        public string Brand
        {
            get { return brand; }
            set { brand = value; }
        }
        public string Model
        {
            get { return model; }
            set { model = value; }
        }
        public void LaptopDetails()
        {
            Console.WriteLine("Brand:" + Brand);
            Console.WriteLine("Moddel:" + Model);
        }
        public void LaptopKeyboard()
        {
            Console.WriteLine("Type using keyboard...");
        }
        private void MotherBoard()
        {
            Console.WriteLine("Motherboard infor is not needed to User");

        }
        private void Proccessor()
        {
            Console.WriteLine("Processor info is not needed...");
        }
    }
  
    class Program
    {
        static void Main()
        {
            Laptop lap = new Laptop();
            lap.Brand = "Dell";
            lap.Model = "Inspiron 2018";
            lap.LaptopDetails();
            lap.LaptopKeyboard();
            // lap.MotherBoard();
          //  lap.Proccessor();
        }
    }
}

Today will do :
	-Structure : IN C# , structure are same as class, but only diff is classes are the reference types, whereas strctures are value types. As a value type the strcutres directly contain their values so their object and instance is stored on stack rather than heap.

Syntax:

struct strct_name
{

	//props
	//methods
	//varable etc
}


using System;
namespace Kishlay_Demo
{
   struct Books
    {
        public int Id;
        public string Name;
        public int price;
    };

    class Program
    {
        static void Main()
        {
            //object or ref of your struct book
            Books b1;
            b1.Id = 100;
            b1.Name = "Computer book";
            b1.price = 450;
            Console.WriteLine("Id:{0}, Name:{1}, Price :{2}", b1.Id, b1.Name, b1.price);
          
        }
    }
}

C# Strccture wiith Method:
======================

using System;
namespace Kishlay_Demo
{
   struct Person
    {
        public string name;
        public string job;
        public string sal;
  
    //method to pass value  of strct

    public void ReadDetails(string n,string j,string s)
    {
        name = n;
        job = j;
        sal = s;
    }
    //another to display person details
    public void  DisplayPerson()
    {
            Console.WriteLine("Name:{0}", name);
            Console.WriteLine("Job:{0}", job);
            Console.WriteLine("Salary:" + sal);
    }
    };
    class Program
    {
        static void Main()
        {
            Person p = new Person();
            p.ReadDetails("Kisholay", "Programmar", "45000");
            p.DisplayPerson();
          
        }
    }
}

C# Stcutre with Array:


using System;
namespace Kishlay_Demo
{
   struct Person
    {
        public string name;
        public string job;
        public string sal;
  
    
    };
    class Program
    {
        static void Main()
        {
            Person[] arr = new Person[2];
            //looping
            for(int i = 0; i < 2; i++)
            {
                Console.WriteLine("plz input name,job,sal:");
                arr[i].name = Console.ReadLine();
                arr[i].job = Console.ReadLine();
                arr[i].sal = Console.ReadLine();
            }
          //Fetch array elements
          for(int i = 0; i < 2; i++)
            {
                Console.WriteLine("Name: {0}", arr[i].name);
            }
        }
    }
}

	-Enum(enumerator)  : In C#, enum is a keyword that is useful to dec an enumeration , in c# the enumeration is type that consits  contants as a list.

Syntax:
	enum enum_name
	{
	//constant value or list
	}
 For example:

	enum Week
	{
		Sunday, =>0 
		Monday,
		Tuesday,
		Wednesday,
		Thursday,
		Friday,
		Saturday =>6
	}


Simple Enum:

using System;
namespace Kishlay_Demo
{
   enum Fever
    {
        Low,
        Medium,
        High
    }
    class Program
    {
        static void Main()
        {
            Fever f = Fever.Medium;
            Console.WriteLine(f);
        }
    }
}

Enum with class:
===========
using System;
namespace Kishlay_Demo
{
 
    class Program
    {
        enum Fever
        {
            Low,
            Medium,
            High
        }
        static void Main()
        {
            Fever f = Fever.Medium;
            Console.WriteLine(f);
        }
    }
}


Enum with another example:

using System;
namespace Kishlay_Demo
{
    enum Months
    {
        January,
        February,
        March,
        April,
        May,
        June,
        July
    }
 
    class Program
    {
      
        static void Main()
        {
            int m = (int)Months.April;
            Console.WriteLine(m);
        }
    }
}



	-Delegates : IN C# the delegate is type that define method signature, and its useful to hold the ref reference of one or more methds which are having the same signature.

By using delegates, you can invoke the methods and send methods as an argument ot other methods.

in C# delete is similar to c++ function pointer.

IN C# delegate allows you to dynamically change the reference to the methods in a class

	It may two types:
		a. Single cast delegate
		b. Multi-cast delegate

STeps to  create deletate in c#:

-declare a delegate
-Reference to  a method
-Instantiate the delegate
-Invoke a delete

Syntax:

delegate <returntype> <delegate_name) <para list>

or

public delegate void User(string name);


Example:

using System;


namespace Kishlay_Demo
{
    public delegate void VerySimple();
    class Program
    {
      public static void India()
        {
            Console.WriteLine("INdia is very big country ");
        }
        static void Main()
        {
            //instantiation
            VerySimple vs = new VerySimple(India);
            //invoke
            vs();
           
        }
    }
}

Single cast with para:
================

using System;


namespace Kishlay_Demo
{
    public delegate void VerySimple(int a, int b);
    class Program
    {
      public static void India(int a, int b)
        {
            Console.WriteLine("Sum:{0}", a + b);
        }
        static void Main()
        {
            //instantiation
            VerySimple vs = new VerySimple(India);
            //invoke
            vs(10,5);
           
        }
    }
}

Multi-Cast: 
========
using System;


namespace Kishlay_Demo
{
    public delegate void VerySimple();
    class Program
    {
      public static void India()
        {
            Console.WriteLine("Welcome in CTS");
            
        }
        public static void UK()
        {
            Console.WriteLine("UK is small country but develped...");
        }
        static void Main()
        {
            //instantiation
            VerySimple vs = new VerySimple(India);
            //invoke
            vs();
            //another instantiation
            vs = UK;
            vs();
           
        }
    }
}

NOte: when you passing para in delegate with multi-cast, by using '+' opt we can add the multiple method ref to the delegate object.
==========================================================================================

MUlti-cast with para:

using System;


namespace Kishlay_Demo
{
    public delegate void SampleDelegate(int a, int b);

    class Program
    {
        public void Add(int a, int b)
        {
            Console.WriteLine("Sum:{0}", a + b);

        }
        public void Sub(int a, int b)
        {
            Console.WriteLine("Sub:{0}", a -b);

        }
        public void Mul(int a, int b)
        {
            Console.WriteLine("MUl:{0}", a *b);

        }
        static void Main()
        {

            Program p = new Program();
            SampleDelegate dlgt = p.Add;
            dlgt += p.Sub;
            dlgt += p.Mul;
            dlgt(30, 5);

        }
    }
}


Delegate wiiith anonymous function: methods without a name , just a body is known Anonymous method.

------------------------
Example:

using System;


namespace Kishlay_Demo
{
    

    class Program
    {
        public delegate void MyDelegate();
        public delegate void Test(int age);

        static void Main()
        {
            MyDelegate d = delegate ()
            {
                Console.WriteLine("hi I am Anonymous mehtod invoked by delegate...");
            };
            Test t = delegate (int age)
              {
                  Console.WriteLine("aGe:{0}", age);
              };
            d();
            t(23);
          

        }
    }
}


	-Delegate Events
-------------------------------------
IN c#  the event is a messsage sent by an object to indicate that paritcular action will happen. The actioin could be caused either by button click, mouse click, move movement etc.

Syntax:

//dec the delegate

public delegate void SampleDelegate();

//dec event
public event SampleDelegate sampleEvnt();

using System;


namespace Kishlay_Demo
{
    class Maths
    {
        //dec teh delegat
        public delegate void SampleDelegate();
        //dec event
        public event SampleDelegate SampleEvent;
        public void Add(int a, int b)
        {
            //call event del to check subcription  in method
            if (SampleEvent != null)
            {
                //Raise the event () opt
                SampleEvent();
                Console.WriteLine("Add result:{0}", a + b);
            }
            else
            {
                Console.WriteLine("Not subscribed to event");
            }

        }
        public void Sub(int x, int y)
        {
            //call event del to check subcription  in method
            if (SampleEvent != null)
            {
                //Raise the event () opt
                SampleEvent();
                Console.WriteLine("Sub result:{0}", x - y);
            }
            else
            {
                Console.WriteLine("Not subscribed to event");
            }

        }
    }
    //dec a class to call your event and delegate method
    class Operations
    {
        Maths m;
        public int a { get; set; }
        public int b { get; set; }
        public Operations(int x, int y)
        {
            m = new Maths();
            //subscribe to sampleevent 
            m.SampleEvent += SampleEventHandler;
            a = x;
            b = y;
        }
        //sample event handler
        public void SampleEventHandler()
        {
            Console.WriteLine("Samplevent handling :calling method");
        }
        public void AddOperation()
        {
            m.Add(a, b);
        }
        public void SubOperation()

        {
            m.Sub(a, b);
        }
    }
    class Program
    {
       

        static void Main()
        {

            Operations op = new Operations(20, 10);
            op.AddOperation();
            op.SubOperation();

        }
    }
}
-Lambda  : Lambda expressions are anonymouse functions that contain expressions or sequencce of opt. All lambda expression use the lambda opt(arrow opt in js/angular) (=>) that can be read as "goes to" or "becomes".. 
The left side of the lambda opt spcfies the input para and right sidde hold an exprssio or code.

Syntax:

Parmeter=>exprssion

Lambda with List:
=============
using System;
using System.Collections.Generic;


namespace Kishlay_Demo
{
   
    class Program
    {
       

        static void Main()
        {

            List<int> list = new List<int>() { 10, 2, 3, 44, 55, 66 };
            List<int> evenNumbers = list.FindAll(x => (x % 2) == 0);

            foreach(var n in evenNumbers)
            {
                Console.WriteLine("{0}",n);

            }

        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;

namespace Kishlay_Demo
{
    class Dog
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }
   
    class Program
    {
       

        static void Main()
        {
            List<Dog> dogs = new List<Dog>()
            {
                new Dog{Name="Rex",Age=4},
                new Dog{Name="Lebra",Age=3},
                new Dog{Name="Tiger",Age=6}
            };

            // get the name of dog usig lambda
            var n = dogs.Select(s => s.Name);
            foreach(var nam in n)
            {
                Console.WriteLine(nam);

            }
          

        }
    }
}

File handling in c#: File handling in c#, to save the information permanently on the disk or reading info from the saved file through c# programming then its known file handlng.

C# File handling uses the stream class to save and retive information from Disk.

File and  Stream:

	- File :A file is collection of data on a disk with specific name , file extension, even dir(folder) 

	Stream: A stream is nothing but a seequence of bytes travelling from source to a destinaion over communication path.
--------------------------

IN C# File handling manages by System.IO class namespace


Create a Dir(folder in specif drives)


Example:

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
  
   
    class Program
    {     

        static void Main()
        {
            DirectoryInfo di = new DirectoryInfo(@"E:\JerlinData");
            di.Create();
            Console.WriteLine("Dir has been createed...");
          

        }
    }
}


Creating a file in C#:
==================
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
  
   
    class Program
    {     

        static void Main()
        {
            // DirectoryInfo di = new DirectoryInfo(@"E:\JerlinData");
            //di.Create();
            FileInfo myfile = new FileInfo(@"E:\JerlinData\Test.pdf");
            myfile.Create();
            Console.WriteLine("File has been createed...");
          

        }
    }
}

Write file content :
---------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            //streamwrite class to write content
            string data = "Hello this is a file handling in c#";
            StreamWriter mw = null;
            mw=File.CreateText(@"E:\JerlinData\Test.txt");
            mw.Write(data);
            Console.WriteLine("file has been created with contents...");
            mw.Close();

        }
    }
}


Another example with streamWriter:  its used to write single line of data into a file


Example:

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            FileStream f = new FileStream("E:\\bb2.txt", FileMode.OpenOrCreate);
            StreamWriter s = new StreamWriter(f);
            s.WriteLine("C# is very very important as dotnet developer");
            s.Close();
            f.Close();
            Console.WriteLine("File created with contents.");

        }
    }
}


StreamReader : REadd string from the stream.

Example:
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            FileStream f = new FileStream("E:\\bb2.txt", FileMode.OpenOrCreate);
            StreamReader s = new StreamReader(f);
            string data = s.ReadLine();
            Console.WriteLine(data);
            s.Close();
            f.Close();

        }
    }
}

Read Multiple line:
==============
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            FileStream f = new FileStream("E:\\bb2.txt", FileMode.OpenOrCreate);
            StreamReader s = new StreamReader(f);
            string line = "";
            while ((line = s.ReadLine())!= null)
                    {
                Console.WriteLine(line);
            }
            s.Close();
            f.Close();
        }
    }
}
Delete file :
==========

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            FileInfo myfi = new FileInfo(@"E:\JerlinData\Test.txt");
            myfi.Delete();
            Console.WriteLine("File has been deleted..");

        }
    }
}
NOte: All C# has been finished if anyone's having any query let me know 
====================================================
	-XML 

ADO.NET  :  Ado.net  is set of classes (a framework) to interact with data source(databases sqlserver,oracle,ms-access,oracle,xml,mongodb).
--------------------------
ADO.NET Stands for ActiveX Data Object.
ADO.NET Support diff. types off of Application .NET :
	-Console App
	-Windows App
	-Desktop app
	-Websites
	-Controls(Notepad,wordpad)
	-Web app
	-Web Service
	-WEB API etc


Some important classes for ADO.NET:
---------------------------------------------------
	-SQLCONNNECTION  class: used to establish or connnect the database connection in c#.net.
	-SQLCOMMAND: this command class used to connnect your db to exxecute the code:
		-ExecuteReader : returns data to the client as rows
		-ExecuteNonQuery() : execute a command that chnages the data in db(insert/update/delete) 
	-SQLDATAADAPTER: DataAdapter is used to connect your dataset(collectioon of tables) to database 

Note: The main job that handles ADO.NET is data management

Guys here we are learn some basic of ADo.net:
============================
	-Create a database
	-Modify a database
		-Add a new col
		-drop a column
		-modi 
		-rename
	-Insert record in a table
	-Search data from a table
	-Update data
	-Delete data 

Note: using C# Console App


Create a database in C#:

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Data.SqlClient;
//if your are using C# core 
//using Microsoft.Data.SqlClient;


namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            //create a database using C#

            SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Master;Integrated Security=True");
            string q = "Create database CTSDB";
	//string q="alter database CTSDB modify name=EmpDb";
	//drop database Empdb"

            SqlCommand cmd = new SqlCommand(q, con);
            con.Open();
            cmd.ExecuteNonQuery();
            Console.WriteLine("Database has been created...");

        }
    }
}


if you are using dotnet core c#: you must add the follwoing package:

 

Create a Table in ADO.NET using c#:
=========================
using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q = @"Create table dbo.Products
            (Id int IDENTITY(1,1) NOT NULL,
            Name varchar(50),
            Price int 
            )";
            SqlCommand cmd = new SqlCommand(q, con);
            con.Open();
            cmd.ExecuteNonQuery();
            Console.WriteLine("Table  has been created...");
        }
    }
}

// you can also do alter table command to modify your table schema

	ALTER TABLE Products
	ADD/MODIFY/DROP


insert Row in Table:
===============
using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q ="insert into Products(Name,Price) values('Mobile',50000), ()";
            SqlCommand cmd = new SqlCommand(q, con);
            con.Open();
            cmd.ExecuteNonQuery();
            Console.WriteLine("Record  has been inserted...");
        }
    }
}


Parameterezed Query in SQL TO insert record:
================================
using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q ="insert into Products(Name,Price) values(@Name,@Price)";
            SqlCommand cmd = new SqlCommand(q, con);
            //pass the value to para
            cmd.Parameters.AddWithValue("@Name","Priyanka");
            cmd.Parameters.AddWithValue("@Price",5000);
            con.Open();
            cmd.ExecuteNonQuery();
            Console.WriteLine("Record  has been inserted...");
        }
    }
}



Read Data from database using ado.net in Console app:
=======================================


using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q ="select * from products";
            con.Open();
            SqlCommand cmd = new SqlCommand(q, con);
            SqlDataReader dr=cmd.ExecuteReader();
            while (dr.Read())
            {
                Console.WriteLine(dr[0].ToString()+" "+dr[1].ToString()+" "+dr[2].ToString());
                
            }
           con.Close();
        }
    }
}

Update Data from Database using ADO.NET In Console App:
-----------------------------------------------------------------------------

using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q ="update products set Name='iPhone' ,Price=90000 where Id=1";
          
            SqlCommand cmd = new SqlCommand(q, con);
             con.Open();
             cmd.ExecuteNonQuery();
             Console.WriteLine("Update reecord succcessfully....");
        }
    }
}
'

Delete data in ado.net :
================

using System;
using Microsoft.Data.SqlClient;

namespace DbDemo
{
    class Program
    {
        static void Main(string[] args)
        {
                SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EmpDb;Integrated Security=True");
            string q ="delete from products where Id=1";
          
            SqlCommand cmd = new SqlCommand(q, con);
             con.Open();
             cmd.ExecuteNonQuery();
             Console.WriteLine("Delete reecord succcessfully....");
        }
    }
}


CRUD (Create,Read,Update,Delete):

Step1: suppose you have product table with Id,Name,Price
class ProductData
{


-GetProduct()  : get the data from db
-NewProduct(): insert new record
-UpdateProduct() : update the data
-DeleteProduct() : delete the product

}

call all those method in Main()
{


}

=========================================================================================

Design Patterns 
C/C++ Data Structures and algorithim (HackerRank)



Design Patterns :   REal life example



History and Evoluation of DEsign pattern:
-----------------------------------------------------
The  four authors of book famouly known as the Gang of Four is the ones who brought the cconcept of design patterns in their books "Elements of Resuable Obect Oriented Software".



What are Design Patterns:  Design patterns are nothing but documented and tested solutions for any problom in IT, so in simple words , we can say that the Design patterns are suable solutions to that problems that as  developer we encounter in our day to day software designing and programming.

Design patterns are basically used to sove the problems of objecct geeneration and integration.

Types of Deisgn Patterns:
================
	1. Creational Design Pattern (Object Creation and Initilzation)
	2. Strctural Design Patttern( Structureal Changes of class and interface and set the relationship between classes)
	3.Behavioural design pattern(Communication between objects)




The Creational Design pattern deals with Object Creation and Initalization. The CDP gives the programmer more fliexiblity in deciding which object need to be created or given case study.


Types of creational design patterns
	Factory Method Pattern
	Abstract Factory Pattern
	Singleton Pattern
	Prototype Pattern
	Builder Pattern
	Object Pool Pattern





Strctural Design Patttern: here Structual Design pattern is basically used  to manage the structure of clasees and interface as well as manage the relationship between the classes.


	-Adapter
	-Facade
	-Deorator
	-Composite
	-Proxy
	-Flyweight
	-Bridge



Behavioural design pattern: The Behavioural design pattern deals with the commmuncation between classes and objects.
That means if you want to change the behaviour of class and again your want it to affect other classes of the your project as well you need to use Bhavioural Design pattern.
	-Chain of REsponsibilty,
	Command,
	-Observeer
	-Iterator
	-State
	-TEmplate
	- etc

Before apply Design pattern concept in your project , a user, developer must aware of  Oops concept of C#.net :
	-Abstarction
	-INheritancce
	-Poly
	-Encapsulation
	-Interface
	-Classes and object
	-Abstracct class

Singleton Pattern says that just"define a class that has only one instance and provides a global point of access to it".

In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.

There are two forms of singleton design pattern

Early Instantiation: creation of instance at load time.
Lazy Instantiation: creation of instance when required.




Example of SingleTon:

Step1: Create class With Singleton.cs 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
   public sealed class Singleton
    {
        private static int counter = 0;
        private static Singleton instance = null;
        public static Singleton GetInstance
        {
            get
            {
                if (instance == null)
              
                    instance = new Singleton();
                    return instance;
             
            }
           
        }
        private Singleton()
        {
            counter++;
            Console.WriteLine("Counter value:" + counter.ToString());
        }
        public void Details(string message)
        {
            Console.Write(message);
        }
    }
}



Step2: Create the object in Program.cs

using System;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            Singleton st = Singleton.GetInstance;
            st.Details("from CTS Batch");
            Singleton st1 = Singleton.GetInstance;
            st1.Details("From Arvind");
            Console.ReadLine();

        }
    }
}



What is Factory Design pattern :
======================
A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate. In other words, subclasses are responsible to create the instance of the class.

The Factory Method Pattern is also known as Virtual Constructor.

Advantage of Factory Design Pattern
Factory Method Pattern allows the sub-classes to choose the type of objects to create.
It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code. That means the code interacts solely with the resultant interface or abstract class, so that it will work with any classes that implement that interface or that extends that abstract class.
Usage of Factory Design Pattern
When a class doesn't know what sub-classes will be required to create
When a class wants that its sub-classes specify the objects to be created.
When the parent classes choose the creation of objects to its sub-classes.



A factory is an object which is used for creatiing  other objects


How  to achive  Factory Design Pattern: without the factory pattern:

Step1: Create the Interface CreditCard.cs
	using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
  public interface CreditCard
    {
        string GetCardType();
        int GetCreditLimit();
        int GetAnnualCharge();

    }
}

Step 2:  we have 3 credit so here we need to create 3 classes, first create a class file withname MoneyBack.cs 

  class MoneyBack:CreditCard
    {
        public string GetCardType()
        {
            return "MoneyBack";
        }

      int CreditCard.GetAnnualCharge()
        {
            return 5000;
        }

       

        int CreditCard.GetCreditLimit()
        {
            return 50000;
        }
    }

Similarlary you need to same steps for Moneyback:
==========================
Step 3: open program.cs and create the instance

using System;

namespace Kishlay_Demo
{
       class Program
    {     

        static void Main()
        {
            //generally we will get the card type from UI (webpage)
            //here we are hardcodded the card type only
            string cardType = "MoneyBack";
            CreditCard cardDetails = null;
            //Based on credittype we are creating the instance using if else codition
            if (cardType == "MoneyBack")
            {
                cardDetails = new MoneyBack();

            }
            else if (cardType == "Titanium")
            {
                cardDetails = new Titanium();
            }
            else if (cardType == "Platinum")
            {
                cardDetails = new Platinum();
            }
            if (cardDetails != null)
            {
                Console.WriteLine("Card Type:" + cardDetails.GetCardType());
                Console.WriteLine("CardLimit:" + cardDetails.GetCreditLimit());
                Console.WriteLine("AnnualCharge:" + cardDetails.GetAnnualCharge());
            }
            else
            {
                Console.WriteLine("No card is valid");
            }
        }
    }
}

with Factory Pattern:
================

1- Product (Interface)
2. ConcreateProduct(Class which implment the interface)
3. Creator : this is an abstract class and dec the factor method which returns an obj of type Interface
4. ConcreateCreator :this is class which implments the creater class and override the factory method to return an instancce



Step1: IFactory
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
    public interface IFactory
    {
        void Drive(int miles);
    }
}

Step 2:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
    /// <summary>
    /// the creator abstract class here
    /// </summary>
    public abstract class VehicleFactory
    {
        public abstract IFactory GetVehicle(string Vehicle);
    }
}


Step 3
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
   public class ConcreateVehicleFactor:VehicleFactory
    {
        public override IFactory GetVehicle(string Vehicle)
        {
            switch (Vehicle)
            {
                case "Scooter":
                    return new Scooter();
                case "Bike":
                    return new Bike();
                default:
                    throw new ApplicationException(string.Format("Vehicle '{0}' cannot be created", Vehicle));
            }
        }
    }
}


Scooter.cs class with method:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
    public class Scooter : IFactory
    {
       public void Drive(int miles)
        {
            Console.WriteLine("Drive the scooter :" + miles.ToString() + "km");
        }
    }
}

Biike.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kishlay_Demo
{
    public class Bike:IFactory
    {
        public void Drive(int miles)
        {
            Console.WriteLine("Drive the Bike :" + miles.ToString() + "km");
        }
    }
}

Client.cs (Program.cs file) 

using System;

namespace Kishlay_Demo
{
       class Program
    {     
        /// <summary>
        ///  Factory pattern objecct creation
        
        /// </summary>
        static void Main()
        {
            VehicleFactory factory = new ConcreateVehicleFactor();
            IFactory scooter = factory.GetVehicle("Scooter");
            scooter.Drive(10);
            IFactory bike = factory.GetVehicle("Bike");
            bike.Drive(20);

        }
    }
}

DS (Data Structures) in C++ 
http://www.btechsmartclass.com/data_structures/single-linked-list.html
======================
DS :  DS is way to store and organize data so that it can be used very efficiently manner.
The DS name indicates iteself that organizing the data in memory. There are many ways of organizing the data in the memory for example you have already seen or used Array in C//C++ lang, Array is a collecction for memory elements in which data is stored sesquentially i.e. one after aonther .

So Array is collection of memory elemnts in which data is stored in continous mannger.

Types of DS:
=========
	-Primitive Data Structure : the int, char, float, double ,pointeer are the primitive DS that can hold a single value.
	-Non-Primitive DS: 
		a. Linear DS
		b.Non-Linear DS
Linear DS: The Arrangement of data in sequential manner is known as Linear DS.  For example Arrays, Linked list, Stacks, Queuses. 

Non-Linear DS: When one element is conneccted to the 'n' number of elements is known as non-linear DS, For example:
	tree,graphs.


DS Array:
=======
	- Arrays are defined as the collection of similar type of items stored in contiguous memoery location.
	
	dec a an array in c/c++:
	
	int arr[10;
	char name[10];
	float marks[5];

Simple of Array in



Example of 2D:
=============
//2D array
#include<stdio.h>
void main()
{
int arr[3][3],i,j;
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
printf("Enter arr[%d][%d]:",i,j);
//read value from keyboard in c
scanf("%d",&arr[i][j]);
}
}
//print elemets
printf("\n printing elements:");
for(i=0;i<3;i++)
{
printf("\n");
for(j=0;j<3;j++)
{
printf("%d\t",arr[i][j]);
}
}
}



DS Linked List:
============
	Lined List : DS linked lsit can defined as collecction of objects called nodes that are randomly  stored in the momory.
	here A node contains two fields  i.e. data stored at that particular address and pthe pointer which contains the addrress of the next node in memory.

Example Singly Linked List:
====================
//simple linked list
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
struct node *head;
//dec many function to perform the opt
void beginsert();
void lastinsert();
//void randominsert();
//void begindelete();
//void lastdelete();
//void randomdelete();
void display();
//void search();
void main()
{
int choice=0;
clrscr();
while(choice!=9)
{
printf("\n\n All the Operations \n");
printf("\n Choose one option   in the list \n");
printf("====================================================");
printf("\n 1. Insert \n 2. Insert at Last  3. Show \n 4.Exit\n");
printf("\n Enter the choice ?\n");
scanf("%d",&choice);
switch(choice)
{
case 1:
  beginsert();

  break;
  case 2:
  lastinsert();
  break;
 /* case 3:
  randominsert();
  break;
  case 4:
  begindelete();
  break;
  case 5:
  lastdelete();
  break;
  case 6:
  randomdelete();
  break;
  case 7:
  search();
*/
  case 3:
  display();
  break;
  case 4:
  exit(0);
  break;
  default:
  printf("Plz enter valid choices :");
  }
  }
  }
  //call the first function
  void beginsert()
  {
  struct node *ptr;
  int item;
  ptr=(struct node *) malloc(sizeof(struct node *));
  if(ptr==NULL)
  {
  printf("\n your ptr overflow");
  }
  else
  {
  printf("\n Enter the value \n");
  scanf("%d",&item);
  ptr->data=item;
  ptr->next=head;
  head=ptr;
  printf("\n Node has been inserted..");
  }
  }
  //insert last
  void lastinsert()
  {
  struct node *ptr,*temp;
  int item;
  ptr=(struct node*)malloc(sizeof(struct node));
  if(ptr==NULL)
  {
  printf("Overflow last value...");
  }
  else
  {
  printf("\n Enter the vlaue ?\n");
  scanf("%d",&item);
  ptr->data=item;
  if(head==NULL)
  {
  ptr->next=NULL;
  head=ptr;
  printf("\n Last node has been inserted...");
  }
  else
  {
  temp=head;
  while(temp->next!=NULL)
  {
  temp=temp->next;
  }
  temp->next=ptr;
  ptr->next=NULL;
  printf("\n Node inserted");
  }
  }
  }
  //other part i am skipping
  void display()
  {
  struct node *ptr;
  ptr=head;
  if(ptr==NULL)
  {
  printf("Nothing to show");
  }
  else
  {
  printf("\n printing elements\n");
  while(ptr!=NULL)
  {
  printf("\n%d",ptr->data);
  ptr=ptr->next;
  }
  }
  }



=================================================

MS SQL Server Functions, Stored Procedures, Triggers
==================================================

SQL SERVER Stored procedures are used to group one or more T-SQL statements(commands) into logical units. The SP is stored as named object in SQL Server Database .

When you call stored proccedure for the first time, sql server create an execution plan and stores in the cache.



How to Create a Stored procedure and how to execute:
======================================

Step 1: First you have to create a table  that will be used for SP.

Create table product(Pid int, Pname varchar(40) )

Step 2: open SQL SERVER -> open an Query Editor 

	Create procedure or proc <sp_name>
	(
	)
	As
	Begin
	SQL Statement
	End
Step 3: Save and execcutee (ctrl+shift+E)


READ Procedure :

select * from Product
-- Procedure for Show the data
Create procedure ShowData
as
begin
Select * from Product
End

Create proc ShowProduct
as
Select * from Product
return

-- step : execute <proc_name>
execute ShowProduct
ShowProduct
exec ShowData


SP with Single  Para: SP allows us to pass one or more values to it at run time.
---------------------------------------------------------------------------------------------------

alter proc ShowProduct(@min_price as Decimal, @max_price as Decimal)
as
Begin
select Product_name,price from Product
where Price>=@min_price AND Price<=@max_price
Order by Price;
End;

exec ShowProduct @min_price=5000 , @max_price=60000

select * from Product

-- Creating text para in SP
----------------------------------------------
alter proc ShowProduct(@min_price as Decimal, @max_price as Decimal,@name as varchar(max))
as
Begin
select Product_name,price from Product
where Price>=@min_price AND Price<=@max_price AND
Product_name LIKE '%'+@name+'%'
Order by Price;
End;

exec ShowProduct @min_price=5000 , @max_price=60000,@name='Benq TV';


Creating  optional parameters: SQL Server sp allow you to specify default value fro parameters so that when you call SP , you can skip the parameters with default value.


====================

-- Creating optional para in SP
alter proc ShowProduct(@min_price as Decimal=0, @max_price as Decimal=99999,@name as varchar(max))
as
Begin
select Product_name,price from Product
where Price>=@min_price AND Price<=@max_price AND
Product_name LIKE '%'+@name+'%'
Order by Price;
End;

exec ShowProduct @name='Benq TV';

USING NULL as the default value:
========================
-- Creating NULL  default value
alter proc ShowProduct(@min_price as Decimal=0, @max_price as Decimal=NULL,@name as varchar(max))
as
Begin
select Product_name,price from Product
where Price>=@min_price OR Price<=@max_price AND
Product_name LIKE '%'+@name+'%'
Order by Price;
End;

exec ShowProduct @min_price=4000, @name='Headphone';

SP with output parameter:
===================

-- output para
Create proc FindProBy1(@name varchar(max), @product_count int OUTPUT)
AS
BEGIN
Select Product_name,Price from Product
where Product_name=@name
Select @product_count=@@ROWCOUNT;
end;

--calling the sp with output

Declare @count int
exec FindProBy1
@name='Benq TV',
@product_count=@count OUTPUT;
SELECT @count as 'Number of Products Found';

SP WITH INSERT:
===============

Create proc SavePrd
(
@name varchar(max),
@price decimal
)
as
insert into product(Product_name,price) values(@name,@price)
return

--execute
exec SavePrd @name='LED',@price=4500.00


SP_WITH Delete:
==============
Create proc DelSagar
(
@id int
)
as
delete from product where Id=@id
return

--execute
exec DelSagar @id=9


SP WITH SEARCH:
===============
--SP WITH SEARCH

Create proc searchdata
(
@id int
)
as
select * from Product where Id=@id
return 

searchdata @id=1
  
SQL SERVER SP WITH UPDATE:
-----------------------------------------------


CREATE PROC sagarupd
(
@id int,
@name varchar(max),
@price decimal
)

as
update Product set Product_name=@name, Price=@price where Id=@id
return

---------------------------------------------------------------------------------------------------------------------------------------------------
CRUD Single procedure : INSERT,UPDATE DELETE



MS SQL Server Functions (UDF) :
==========================

UDF we usallly come across queries, table, views, SP, functions, Developers often wonder what are the real diff between UDF and functions as well asp Stored procedure.

There are two type of function in SQL SERVER:
	- In-Built function : can be modified
	-User -Defined Function : whereas you can create or modify your  own user defined funcction.


Example of UDF:
==============

Syntax:

Create function [Schema_name] function_name(para)
RETURNS data_type as
BEGIN
	Statement
	Returrn vlaue
End

Step1: you can a new table for UDF

Step 2: Create UDF  to reutrn value or calcuate 

alter function Myfun(
@qty int,
@price dec(10,2),
@dis dec(4,2)
)
RETURNS Dec(10,2)
as
BEGIN
return @qty*@price*(0.5-@dis);
end;

--call just pass simle value in function

select arvinddb.dbo.Myfun(10,100,0.1) net_Sales;


-- Scalar Function: Single alue  
============


create function GetEmpData(@e int)
RETURNS varchar(50)
as
BEGIN
RETURN(select ename from Emp10 where empno=@e)
end
--Call it

select * from emp10
print dbo.GetEmpData(2)

-- Get salary based on given Range using Scalar:
--------------------------------------------------------------


create function GetALLSal(@sa int)
RETURNs Table
as 
Return
	Select * from emp10 where sal>=@sa


	--call it
	select * from GetAllSal(50000)

-- Calculate the Average of marks table

step1: Create a marks table 

Step 2: define UDF 

Step 3: Call the function
ALTER Function [dbo].[GetAvg](@Name varchar(50) )
RETURNS @Marks TABLE(
Name varchar(50),
Sub1 int,
Sub2 int,
Sub3 int,
Average dec(5,2)
)
as
Begin
	DECLARE @Avg Decimal(5,2)
	Declare @Rno int
	Insert into @Marks(Name) values(@Name)
	SELECT @Rno=Roll from marks where Name=@Name
	Select @Avg=(Sub1+Sub2+Sub3)/3 from marks where Roll=@Rno
	-- update
	update @Marks Set Sub1=(Select  Sub1 from marks where Roll=@Rno),
				Sub2=(Select  Sub2 from marks where Roll=@Rno),
				Sub3=(Select  Sub3 from marks where Roll=@Rno),
				Average=@Avg
				where Name=@Name
	Return
	End
	

	--get the value based on Name

	Select * from marks

	select * from GetAvg('Anil')


SQL SERVER TRIGGER:
=====================

A  trigger is a special kind of stored procedure that automatically exeutes when an event occures in the database servere.

Or
A trigger is a special kind of SP that automatially fired or executed when some event(Insert,Delete,Update) occures.


There are 3 types of Triggers:
	1. DML Trigger(Data manipulation Lang) INSERT/UPDATE/DELETE
	2. DDL Trigger Create, Alter
	3. Logon Trigger

DML triggers are fired automatically in Response to DML event

DML Trigger can be 2 types:
	a. After Triggers (Also called for Triggers)
	b. Instead of Triggers


Syntax:
========
create trigger [triger_name] On Table
	After INSERT | After Delete | After Update
As Begin
	-dml statement
	Insert into dbo.table
End

Lets do the example:

Step1: create a new table 

Step 2: with help of trigger to we can insert//Delete/Update the records in table


Create table Employee_Test
(Emp_ID int IDENTITY,
Emp_name varchar(100),
Emp_Sal Decimal(10,2)
);

-- insert some records in it
insert into Employee_Test values('Rajanath',10000);
insert into Employee_Test values('Jerlin',20000);
insert into Employee_Test values('John',10000);

-- Create another table to store all transaction records such insert, delete and update on Emp_Test table


Create table Employee_Test_Manage
(Emp_ID int ,
Emp_name varchar(100),
Emp_Sal Decimal(10,2),
Manage_Action varchar(100),
Manage_Time datetime
)

-- Now create a trigger to manaage your Emp_Test by using Emp_Test_Manage table

Create TRIGGER trgAfterInsert ON [dbo].[Employee_Test]
FOR INSERT
AS
declare @empid int;
declare @empname varchar(100);
declare @empsal decimal(10,2);
declare @manage_action varchar(100);
select @empid=i.Emp_ID from inserted i;
select @empname=i.Emp_name from inserted i;
select @empsal=i.Emp_Sal from inserted i;
set @manage_action='Inserted Reccordds --After Insert Trigger';

insert into Employee_Test_Manage(Emp_ID,Emp_name,Emp_Sal,Manage_A ction,Manage_Time)
values(@empid,@empname,@empsal,@manage_action,GETDATE());
print 'After Insert Trigger fired...'
GO

--insert one reccord in orginal table emp_test

insert into Employee_Test(Emp_name,Emp_Sal) values('Arvind',60000);

-- Then see Empployee_Test_manage table

SELECT * from Employee_Test_Manage

Simple example with Triger with DML:
------------------------------------------------
-- create employee
Create table JerlinEmp
(Id int primary key,
Name nvarchar(40),
Salary int,
Gender varchar(50),
DepartmentId int
)
--inser data into JerlinEmp table
insert into JerlinEmp values(1,'Pranaya',5000,'Male',3);
insert into JerlinEmp values(2,'Rajanth',5000,'Male',2);
insert into JerlinEmp values(3,'Anurag',6000,'Male',1);

-- Creeate trigeer that should restrict the insert operation on JerlinEmp table

Create trigger triInsertJerlin
ON JerlinEmp
FOR INSERT
AS
BEGIN
print 'You can not perform Insert operation on JerlinEmp'
Rollback Transaction
End

--lets  insert some records see what happens

insert into JerlinEmp values(4,'Jerlin',6000,'Female',4);

--Protec to update your table
Create trigger triUpdateJerlin
ON JerlinEmp
FOR UPDATE
AS
BEGIN
print 'You can not perform Update operation on JerlinEmp'
Rollback Transaction
End

--update

update JerlinEmp set Salary=9000 where Id=4

--Protec to Delete reccord in your table
Create trigger triDelJerlin
ON JerlinEmp
FOR DELETE
AS
BEGIN
print 'You can not perform DELETE operation on JerlinEmp'
Rollback Transaction
End

-- 
dELETE FROM JerlinEmp where Id=4   

Delete Trigger with Database table
===========
Create trigger deltrigger on [dbo].[Employee]
for delete
as
declare @empid int;
select @empid = i.empid from inserted i;
delete from Employee_Test_Manage where emp_id = @empid;
print 'Data deleted'

=====================================================================================

Example 1: Create a trigger that will  delete reocrd in database table

create table students
(Rollno int not null primary key,
sname varchar(100),
degree varchar(100),
degree_year varchar(100),
society varchar(100)
);
-- inser some record in original table
insert into students values(1,'Mohit','CSC','IV','Music'), (2,'Jerlin','CSC','VI','Music');

--Create atable that will manage your original 
Create table student_audit(
roll_no int not null primary key,
student_name varchar(100),
degree varchar(100),
degree_year varchar(100),
society varchar(100),
deleted_by varchar(50),
delete_at datetime
);

--Create a trigger on studdent to mange deleted records

create trigger AfterDeleteTrigger on Students
AFTER Delete
as Declare
@roll_no INT,
@student_name varchar(100),
@degree varchar(100),
@degree_year varchar(100),
@society varchar(100);

SELECT @roll_no=d.Rollno from deleted d;
Select @student_name=d.sname from deleted d;
select @degree=d.degree from deleted d;
select @degree_year=d.degree_year from deleted d;
select @society=d.society from deleted d;
INSERT INTO student_audit(roll_no,student_name,degree,degree_year,society,deleted_by,delete_at)
values(@roll_no,@student_name,@degree,@degree_year,@society,CAST(SERVERPROPERTY('ServerName') as varchar(50)),
GETDATE());

--now try to delete record whose Id =2
delete from students where Rollno=2;

select * from student_audit;


Exampl1 :  Create trigger that will restrict all the DML operations on any table on Monday.



alter trigger trAllDMLOnWed
ON students
FOR INSERT, UPDATE, DELETE
AS
BEGIN
IF DATEPART(DW,GETDATE())=4
BEGIN
PRINT 'DML operations are not allowed on Thursay'
rollback transaction
End
End
--

insert into students values(6,'Arvind','CSC','IV','Music');


Example 2: Create a trigger that will restrict all the DML opt on student table before 1PM.


alter trigger trAllDMLOnWed
ON students
FOR INSERT, UPDATE, DELETE
AS
BEGIN
IF DATEPART(HH,GETDATE())<13
BEGIN
PRINT 'DML operations are not allowed on AFTER 1PM '
rollback transaction
End
End

DELETE FROM students WHERE Rollno=7



==============================

NEXT Topics Nunit and Moq: Testing
============================


What do you mean by a Unit Test:
========================

In the SE/SD process UNIT test baiscally test individual parts(also called as Unit) of code (mostly methods) and  make it work as expected by Programmar/Developer/Owner.
A unit test is code written by prog/dev which test small piece of functionality of big software/programs,.

Why do we need UNIT  TEST ? 

The purpose of Unit Test that it give you positiivee confidence that yoru code works as you have expected it to work in your software development.

Unit Test may be as:

	-MS UNIT
	-Nunit
	-MOQ


MS-UNIT TEST:
=============

Lets Start Unit Test STep by STep1:

Step1: Create a Project in C#.NET  using visual studio 2019/22
 public class CTSMaths
    {
       
            public double Add(double num1, double num2)
            {
                return num1 + num2;
            }
            public double Sub(double num1, double num2)
            {
                return num1 - num2;
            }
        }


Step2:you have to Add Unit Test Project in C#.net Project and give the reference to add CTSmath.dll file in MS-UNIT TEST project

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using CTSMath;

namespace BasicMathTest
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void Test_AddMethod()
        {
          CTSMaths cTS = new CTSMaths();
          double res = cTS.Add(10, 10);
           Assert.AreEqual(res, 20);

        }
        [TestMethod]
        public void Test_SubMethod()
        {
            CTSMaths cTS = new CTSMaths();
            double res = cTS.Sub(10, 5);
            Assert.AreEqual(res, 5);
        }
    }
}

Step 3: you have to write some certain Methods  that will be evaluated the test cases.
Test menu => Choose Run All the Test 



Nunit Test: Its a 3rd party test framework for testing the code.

NUnit is unit-testing framework for all the .net language.

NUnit is open source software and Nunit 3.0 is realsed under the MIT license.


Lets do the testing with Nunit:

Step1 : Create a new project in c#.net core
using System;

namespace CTSNunitTest
{
    public class Program
    {
       public static int AddNumbers(int num1, int num2)
        {
            return num1 + num2;
        }
        public static int SubNumbers(int num1, int num2)
        {
            return num1 - num2;
        }
    }
    
}

Step 2: Add the nugetpackage: Nunit framework

Step 3: Write method and build it
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;


namespace CTSNunitTest
{
   [TestFixture]
    class FunctionalTest
    {
        //Add req Nunit Test attribute
        [Test]
        public void Addition_Adding()
        {
            var res = Program.AddNumbers(1, 2);
            Assert.That(res, Is.EqualTo(3));

        }
        [Test]
        public void Subtract_Sub()
        {
            var res = Program.AddNumbers(2, 1);
            Assert.That(res, Is.EqualTo(1));
        }
        
    }
}
=========================================================================================

Entity  Framework:
==============

Intro of Entity Framework: .NET 3.5 (VS 2005) as developer, normally we often used to write ADO.NET(ActiveX Data Object) code to perform CRUD(Create,Read,Update,Delete) with the underlying databases such (SQL Server, MysQL, Oracle).

For this we need to create  connection objecct with database, then open connection, then we need to create a dataset to fetch or submit data to the database and convert the data from dataset to .NET objeccts or vice-versa to fullfil your business need.


Actuall ado.net consume a lot time so some time it become cubersome and error-prone procecs to do database in ADO.NET ,so MS has provided a framework  called "Entity Framework" aka "EF" to automate all thse databases related activities for our application if we provide the necessary details tothe EF.


EF is an open source object Relational Mapper/Maping(ORM) framework for .NET APPLICATION that enablues us Devloper any applying  with very less code.


That mewans the EF eliminates(remove) that need for writting the data acess code the developers usually need to write very less code.

Here we are going Learn :

	-EF.6x(6.0) with ASP.NET Core (EF Core)
		A. Entity Framework basic
		B. Databse First Approch
		C. Model First Approach(Create Model (props)



Entity Framework Features
-----------------------------------
Cross-platform: EF Core is a cross-platform framework which can run on Windows, Linux and Mac.
Modelling: EF (Entity Framework) creates an EDM (Entity Data Model) based on POCO (Plain Old CLR Object) entities with get/set properties of different data types. It uses this model when querying or saving entity data to the underlying database.
Querying: EF allows us to use LINQ queries (C#/VB.NET) to retrieve data from the underlying database. The database provider will translate this LINQ queries to the database-specific query language (e.g. SQL for a relational database). EF also allows us to execute raw SQL queries directly to the database.
Change Tracking: EF keeps track of changes occurred to instances of your entities (Property values) which need to be submitted to the database.
Saving: EF executes INSERT, UPDATE, and DELETE commands to the database based on the changes occurred to your entities when you call the SaveChanges() method. EF also provides the asynchronous SaveChangesAsync() method.
Concurrency: EF uses Optimistic Concurrency by default to protect overwriting changes made by another user since data was fetched from the database.
Transactions: EF performs automatic transaction management while querying or saving data. It also provides options to customize transaction management.
Caching: EF includes first level of caching out of the box. So, repeated querying will return data from the cache instead of hitting the database.
Built-in Conventions: EF follows conventions over the configuration programming pattern, and includes a set of default rules which automatically configure the EF model.
Configurations: EF allows us to configure the EF model by using data annotation attributes or Fluent API to override default conventions.
Migrations: EF provides a set of migration commands that can be executed on the NuGet Package Manager Console or the Command Line Interface to create or manage underlying database Schema.


Example of Database First Approach:


Database => EF => Model




EFwith C# Application:
==================
Step1: Create a table with PK

Step 2: Right click on your application =>Choose Data ->Entity Framwork

Step3: Choose Database 

Step 4: Build the EDMx

Step 5: open progrma.cs file
  //fetch data 
            using (amreenDBEntities db=new amreenDBEntities())
            {
                List<Student> listStudents = db.Students.ToList();
                Console.WriteLine();
                foreach(Student student in listStudents)
                {
                    Console.WriteLine($"Name={student.Name},Email={student.Email},Mobile={student.Mobile}");

                }
            }

Step 6: Save and Run
 
--SAVE data into Databse using EF:
-----------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Adm_EFDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            //creat a new student obj

            var newStudent = new Student()
            {
                Name = "Ashish Ranjan",
                Email = "Ak@gmail.com",
                Mobile = "8888888"
            };

           using (RajanthEntity db=new RajanthEntity())
            {
                //add Student obj into Student DbSet
                db.Students.Add(newStudent);
                //call saveChanges() emthod to save student into databases
                db.SaveChanges();
                Console.WriteLine("Save data in db succcesfully....");
            }
           
        }
    }
}




--Updating Data in EF :
===============

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Adm_EFDemo
{
    class Program
    {
        static void Main(string[] args)
        {
           

           using (RajanthEntity db=new RajanthEntity())
            {

                //update :LINQ
                var std = db.Students.First<Student>();
                std.Name = "Ajith";
                db.SaveChanges();
                Console.WriteLine("Updated data");

            }
           
        }
    }
}


Update based on ID:
===============

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Adm_EFDemo
{
    class Program
    {
        static void Main(string[] args)
        {
           

           using (RajanthEntity db=new RajanthEntity())
            {

                //update data based on ID 

                var std = db.Students.FirstOrDefault(x => x.Id == 9);
                //update thier name and email
                std.Name = "Nilay";
                std.Email = "Nila@gmail.com";
                db.SaveChanges();
                Console.WriteLine("Updated data");

            }
           
        }
    }
}


Deleting Data using EF : Remove() method : to delete single record from the database

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Adm_EFDemo
{
    class Program
    {
        static void Main(string[] args)
        {
           

           using (RajanthEntity db=new RajanthEntity())
            {

                var std = db.Students.First<Student>();

                // based on id var std = db.Students.FirstOrDefault(x => x.Id == 9);
                //update thier name and email
                db.Students.Remove(std);

                db.SaveChanges();
                Console.WriteLine("Deleted data");

            }
           
        }
    }
}


Delete based on ID using EF:
====================


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Adm_EFDemo
{
    class Program
    {
        static void Main(string[] args)
        {
           

           using (RajanthEntity db=new RajanthEntity())
            {
            

               var std = db.Students.FirstOrDefault(x => x.Id == 9);
               
                db.Students.Remove(std);

                db.SaveChanges();
                Console.WriteLine("Deleted data");

            }
           
        }
    }
}
====================================================================================================================
ASP.NET MVC 



Intro of ASP.NET : ASP.NET is web framework designed and developed by Microsoft.Its used to develop a websites, web application and web services.

ASP.NET MVC:  framework has become quite famous over the past few years and is one of easy to make your web app,web services . Its a famous among devlopers because ASP.NET MVC WEB APPS are much easier than ASP.NET.
This can be easily executed with  an integrated developement program called Visual Studio.NET (IDE).


If you talk about  ASP.NET MVC Over ASP.NET CORE :

ASP.NET Core is an open source ,e-commerece version of ASP.NET. Its free-cross platform web framework realsed by Micrsoft company in Jun3 2016. This framework can be used for developing websites, desktop app, mobile, IOT, Cloud based app etc.
ASP.NET Core is cloud envirnoment for development and deplyments.


ASP.NET MVC: 

You will learn from very basic to Advance Level(Database connecctity with EF) using ASP.NET MVC :

	-ASP.NET MVC Basic
	-ASP.NET MVC -Routing
	-ASP.MVC html helper
	-ASP.NET MODEL/View/Controller Concept
	-ASP.NET Attribute
	-ASP.NET MVC -Data Annotations (Validation)
	-ASP.NET MVC Action Result
	-ASP.NET MVC Filters
	-ASP.NET Advance(SQL SERVER and Entity framework)



MVC is Model View Controller
-MVC is design pattern
-Mvc pattern is used for building Web, Mobiile, Desktop App etc.
-All the major technologies are using MVC to desing Web APP
-MVC is used by all the tecch. like Java, .NET,PHP,Python,Angular etc.


M: MODEL :  Consits of application data, business rule, and methods(fuction)
		-Models contains the data that users work with. These represent data being  transfrred between View(UI) and Controller.
		-Model objects retive and store model(Prop) state in a database.

View:  (UI) :  Any output represenation of information
		-Views are the components that display the application user interface(UI)
		-Typically UI is created from Model data using HTML,CSS,BS etc


Controller :  It accepts  input and convert it to commands for the model or view.
	 - Controllers are the components that handle user interaction , work with model andn ultimetely select a view to render that display in UI.


Real World Example of MVC:
======================

Create First ASP.NET MVC APPLICATION:
=================================
Step1: Open Visual Studio => New -> Project -> Web App

Step 2: Choose MVC tempalate => Click on OK

It will create your MVC app 


Controller in MVC:
===============


View in MVC:
=========

Model in MVC:
============
Step1: Create student.cs model
  public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

Step 2: create controller action method:
  public ActionResult Show()
        {
            //show all the model props here
            Student s = new Student();
            s.Id = 100;
            s.Name = "Kisholay";
            return View(s);
        }

Step 3: bind your action method with View:
@model adm_cts_2022.Models.Student


@{
    ViewBag.Title = "Show";
}
<h2> Student Details </h2>
<table>
    <tr>
        <td>ID</td>
        <td>@Model.Id</td>
    </tr>
    <tr>
        <td>Name</td>
        <td>@Model.Name</td>
    </tr>
</table>


MVC WITH LIST:
============

Step1: Model.cs
 public class ItemList
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public decimal Price { get; set; }
    }
Step 2: Controller with method
  //bind your itemlist with controller action method
        public ActionResult Product()
        {
            List<ItemList> iList = new List<ItemList>()
            {
                new ItemList{Id=1, Name="iPhone", Category="Mobile", Price=90000},
                new ItemList{Id=2, Name="Hard Disk", Category="Computer", Price=9000},
                new ItemList{Id=3, Name="Mouse", Category="Computer", Price=900},
                new ItemList{Id=4, Name="Samsung NOte20", Category="Mobile", Price=90000}
            };
            return View(iList);
        }

Step 3: View Page
@model IEnumerable<adm_cts_2022.Models.ItemList>

@{
    ViewBag.Title = "Product";
}

<h2>Product</h2>

@foreach (var i in Model)
{
    <b>Id:</b>@i.Id
    <br />
    <b>Name:</b>@i.Name
    <br />
    <b>Cate:</b>@i.Category
    <br />
    <b>Price:</b>@i.Price
    <br />


}



View Engine:
==========
	-What is ViewEngine ?
	-Why ViewEngine is req
	-What is Razor (c#+html)
	-Razor Syntax

View Engine: Viewengine is responsilbel for creating HTML for view.
	-it convert corresponding view  with : HTML+ Progmming lang(C#/VB.net)

View Engine : used to render your page on the browser.


Razor: Razor is view engine
	-Razor is not a new programming lang
	-View file extension for razor is .chstml or vbhtmll

Razor Syntax:  Razor is markup syntax for embeeding server side code itno web page.
It always start with @ symbol.

Lets do some example with Razor:
=========================

<div>
    @DateTime.Now;
</div>

<p>@(5+2)</p>

<br />

@{ 
    var a = 10;
    var b = 5;
    var c = a + b;
}

<div><label>@c</label></div>


Razor with List:


<div>
    @DateTime.Now;
</div>

<p>@(5 + 2)</p>

<br />

@{ 
    var a = 10;
    var b = 5;
    var c = a + b;
}

<div><label>@c</label></div>

<br />
@{ 
        var colorList = new List<string>()
    {
         "REd","Green","Pink" };
    }


<label>@colorList.FirstOrDefault()</label>



Razor View Engine with Conditional Statement/Looping:
==========================================
<br />

@{ 
    bool isTrue = false;
}

@if (isTrue) 
{ 
<h1>Hi Guys we are doing MVC 5</h1>
}

<br />

@{ 
    var price = 50;
}
@if (price > 30) 
{ 
    <p>The pricce is too high</p>
}


<br />

@for(var i = 1; i <= 10; i++)
            {
                <p>Line: @i</p>
            }

<br />

<ul>
    @foreach(var c in "food")
            {
                <li>@c</li>
            }
</ul>

<br />

@{ 
    string[] friends = { "Tom", "Bill", "sunder" };
}

@foreach(var n in friends)
            {
                <li>@n</li>
            }

ASP.NET MVC: RAZOR finish

=======================================================================================================

ViewBag In ASP.NET MVC:

	-What is ViewBag in ASP.NET MVC
	-How to pass and retirve data from Viewbag in ASP.NET MVC
	-Example of ViewBag

What is ViewBag: The ViewBag in asp.net mvc framework is one of the mechansim to pass the data from Controller Action method to a view.

Syntax:

ViewBag.Myprop=value;
ViewBag.Name="Rajanth";


Step1: open coontroller action method:

  public ActionResult Index()
        {
            ViewBag.data = "India is great country of the world!";
            return View();
        }

Step 2: open View(INdex.cshtml)


<div>
    @ViewBag.data
</div>


ViewData In ASP.NET MVC: is almost similar or same as ViewBag and its also useed for passing models/controllers data to view.

here you can store the data in key-value pair.

Syntax:

ViewData["Id"]=100;

Example:

step1: controller with acction method:


  ViewData["data"] = "CTS is big MNCs";


step2: open view(Index.cshtml)

<p>
    @ViewData["data"]
</p>

ASP.NET MVC : Routing
==================

Routing is pattern matching System in asp.net mvc. Routing maps an incomming request(from the browser) to particualr resources (Contrller & action method).
This means routing provide us the funcctionality to define a URL pattern thaat will handle the request.
That how routing.

URL patternn:

	- domain.com/Home/About
		-domain is namepsce for hosting (server name)
		-Home is controller name
		-Abbout is an action method name

MVC having diff types of Routing:
========================
	-Conventional or Traditional Routing(using Routing Config file) : Conventional or Traditional is a pattern matching system for URLs that maps all incomming request tothe particualr controller and their action method.
	-We set all the routes in the routeConfig file
	-Attribute Routing (Avilable in MVC 5) : Its is very simple routing method  , here you an define all the orutes and attributes  to controller your applicaiton in MVC 5.




Route: Route is pattern matcching for specific URL, it need some parameters 
		-Name
		-Pattern
		-Default values
		-Constraint(condition if any)


CUSTOM Routing Example:

 public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
            routes.MapRoute(
                name: "CTS",
                url: "CTS/{id}",
                defaults:new { controller = "CTS", action = "Index" }
                );
            //domainName/CTS
            //http://localhost:57701/CTS

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "About", id = UrlParameter.Optional }
            );



HOW TO USE ATTRIBUTE ROUTING:
============================

if we are defing Routes by using [Route] attriibute is called as Attribute Routing. if provides you more control over the URLs by defing routes directly on actions and controllers in your asp.net mvc app.

Lets do one example:

Step1: Create Model (STudent.cs)
  public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
STep 2: Create a controller (CTS)
 public class StudentController : Controller
    {
        static List<Student> students = new List<Student>()

        {
            new Student(){Id=1,Name="Prachi"},
            new Student(){Id=2,Name="Jerlin"},
            new Student(){Id=3,Name="Mittals"}
        };
        //http://localhost:57701/Student/GetAllStudents
        [HttpGet]
        public ActionResult GetAllStudents()    
        {
            return View(students);
        }
        //search studentdetails based on ID
        /// <summary>
        /// http://localhost:57701/Student/GetStudentById?studentID=2
        /// </summary>
        /// <param name="studentID"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetStudentById(int studentID)
        {
            Student studentDetails = students.FirstOrDefault(s => s.Id == studentID);
            return View(studentDetails);
        }
    }

STep 3: Create aView to bind your model 
@model IEnumerable<adm_cts_2022.Models.Student>

@{
    ViewBag.Title = "GetAllStudents";
}

<h2>GetAllStudents</h2>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model=>model.Id)
        </th>
        <th>
            @Html.DisplayNameFor(model=>model.Name)
        </th>
    </tr>
    @foreach(var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem=>item.Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem=>item.Name)
                    </td>
                </tr>
            }
</table>


StudentById View:

@model adm_cts_2022.Models.Student

@{
    ViewBag.Title = "GetStudentById";
}

<h2>GetStudentById</h2>

<hr />
<dl class="dl-horizontal">
    <dt>
        @Html.DisplayNameFor(model => model.Name)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Name)
    </dd>
    <dt>
        @Html.DisplayNameFor(model => model.Id)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Id)
    </dd>
</dl>


How to use Attribute routing:
=====================
Simply we can use Routerprefixx or route [route] attribute for using attribute routing in the controller

Lets example:

 [RoutePrefix("Student")]
    public class StudentController : Controller
    {
        static List<Student> students = new List<Student>()

        {
            new Student(){Id=1,Name="Prachi"},
            new Student(){Id=2,Name="Jerlin"},
            new Student(){Id=3,Name="Mittals"}
        };
        //http://localhost:57701/Student/GetAllStudents
        [HttpGet]
        [Route("Arvind")]
        //http://localhost:57701/Student/Arvind
        public ActionResult GetAllStudents()
        {
            return View(students);
        }




ASP.NET MVC : HTML Helper :
----------------------------------------

As you know already  that MVC 5 does not use Server control and instead it uses Plain HTML control. The benefit of using plain HTML CONTROL is loads faster and easily readable. However plain HTML control does get strongly bouned(Model) with Models and it this situation , HTML Helper class helps a lot .

HTML Helper class have a set fo methods that later converted into plain HTML controls.

Here mvc 5 WE have set of clases and methods  that help to create HTML CONTROLS(Forms) in MVC:

html Helpers are cate as :
	1. Inline HTML helper
	2.Built-in HTML Helper
		a. Standard HTML helper
		b. Strongly Typed (Model)
		c. Template HTML Helper(Auto-Generated HTML control)
	3. Custom HTML Helper (desiged by developer)


Inline Example:1
=========
@helper AddHelper(int a, int b)
{
    <label>Add : @(a+b)</label>
}

<div class="jumbotron">
   <label>@AddHelper(100,200) </label>
</div>


Example 2: Inline HTML Helper





@helper Hi(string message) { 
    <label>@message</label>
    }


<div style="background-color:azure;">
    <label>@Hi("Welcome to ASP.NET MVC5 ")
    </label>
</div>

List of Standard HTML Helper :
======================
@Html.ActionLink() : used create link on html page (no need to <a href=#>
@Html.TextBox(): used to create a text box
@Html.CheckBox() : used to create a checkbox
@Html.RadioButton():used to create a Radio
@Html.BeginForm() : used to start a form(<form>)
@Html.EndForm(): used to end a form
@Html.DropDownList(): used to create a drop-downlist 
@Html.Hidden(): used to create hidden fields
@html.Lable(): used for creating a html label is on the browser.
@Html.TextArea(): used to create textArea(Multi-line)
@Html.Password(): used to create password input field


Lets do one example of Standard HTML Helper :

@{ 
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <title>Standard HTML helper example</title>
</head>
<body>
    <div>
        <h3> Label example </h3>
        @Html.Label("firstName", "First Name")
        <h3>TextBox :</h3>
        @Html.TextBox("txtFirstName", "", new { @class = "form-control", placeholder = "First Name" })
        <h3>TextArea</h3>
        @Html.TextArea("Address", new { @class = "form-control", rows = "5" })
        <h3> Password:</h3>
        @Html.Password("password", "", new { @class = "form-control" })
        <h3>Radio button</h3>
        @Html.RadioButton("Gender", "Male", new { id = "gender" })Male
        <h3>checkbox</h3>
        @Html.CheckBox("mvc5")ASP.NET MVC  
        <h3>ListBox </h3>
        @Html.ListBox("Skills",new List<SelectListItem>
   {

       new SelectListItem{Text="ASP.NET MVC 5",Value="1"},
       new SelectListItem{Text="ASP.NET ",Value="2"},
       new SelectListItem{Text="HTML",Value="3"},
   },new {@class="form-control"})

        <h3>Drop Downlsit</h3>
        @Html.DropDownList("Gender", new List<SelectListItem>

   {   new SelectListItem{Text="Selecct your Gender ",Value="1"},
   new SelectListItem{Text="male ",Value="2"},
   new SelectListItem{Text="Female ",Value="3"},
   },new { @class = "custom-select" })
    </div>
</body>
</html>

Strongly HTML Helper class:
======================
Step1: model.cs
   public class UserModel
    {
        public string Name { get; set; }
    }

Step 2: Controller ->Action method

  public ActionResult Index()
        {
            return View();
        }


Step 3: Index.cshtml view
@model adm_cts_2022.Models.UserModel
@{ 
    Layout = null;
}
<!DOCTYPE html>

<html>
<head><title>Strongly HTML helper example</title>
    <style>
        .green{color:blue;}
    </style>
</head>
<body>
  @using (Html.BeginForm("Index","Home", FormMethod.Post))
            {
              @Html.LabelFor(s=>s.Name) 

      @Html.TextBox("Name","Enter name here",new {style="color:red"})
      <br />
      @Html.TextBoxFor(m=>m.Name,new { @value="Enter your name",@class="green"})
            }
</body>
</html>

READ VALUE IN TEXT BOX USING  HTML helper class:
-----------------------------------------------------------------------

step1:  Controller method:

 public ActionResult Index(FormCollection Form)
        {
            ViewBag.Name = Form["txtName"];
            return View();
        }

Step 2: Create View with textbox
@model adm_cts_2022.Models.UserModel
@{ 
    Layout = null;
}
<!DOCTYPE html>

<html>
<head><title>Strongly HTML helper example</title>
    <style>
        .green{color:blue;}
    </style>
</head>
<body>
  @using (Html.BeginForm("Index","Home", FormMethod.Post))
            {
              @Html.Label("Name") 

      @Html.TextBox("txtName","Enter name here",new {style="color:red"})
      <input type="submit" id="btnsubmit" name="Submit" />
     
            }
    @ViewBag.Name
</body>
</html>


Read value using STrongly html helper class:
=================================

STEP1: UserModel.cs
 public class UserModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public bool Addon { get; set; }
    }

Step 2: Action Method
 [HttpPost]
        public ActionResult Form2(Models.UserModel sm)
        {
            ViewBag.Id = sm.Id;
            ViewBag.Name = sm.Name;
            if (sm.Addon == true)
                ViewBag.Addon = "Selected";
            else
                ViewBag.Addon = "NOt Selected";
            return View("Index");
        }

Step 3: Index.cshtml
@model adm_cts_2022.Models.UserModel
@{ 
    Layout = null;
}

<h4 style="color:purple">
    <b>ID:</b> @ViewBag.Id <br />
    <b>Name:</b>@ViewBag.Name <br />
    <b>Addon:</b>@ViewBag.Addon
</h4>

<h2><b>Forms Strongly typed</b></h2>

@using(Html.BeginForm("Form2","Home",FormMethod.Post))
            {
<table>
    <tr>
        <td>Enter ID:</td>
        <td>@Html.TextBoxFor(m => m.Id)</td>
    </tr>
    <tr>
        <td>Enter Name:</td>
        <td>@Html.TextBoxFor(m => m.Name)</td>
    </tr>
    <tr>
        <td>AddOn:</td>
        <td>@Html.CheckBoxFor(m => m.Addon)</td>
    </tr>
    <tr>
        <td colspan="2"><input type="submit" value="Submit" /></td>
    </tr>
</table>
            }


Validatition with ASP.NET MVC FORM(Data Annotations)
------------------------------------------------------------------------------------------------------

There are several validations attribute avilable in MVC 5.

Meaning of Validation: We can say that validation is nothing but set of rules and regular set by you,programmar,developer on the input fields of webpage so that they satisfy the business rules for that particular input field to maintain correctness data.

There are 2 types validation :
	-Client Side Validation(JS,Query)
	-Server-Side Validation



MS MVC provide a System.ComponentModel.DataAnnotations assembly to maintain validation attribute in MVC.


DataAnnoations: asp.net mvc uses DataAnonnation attribute to implement validations. DataAnnonations includes inbuilt-validation attribute for diff validation reulse  which can be applied to property of model class.
DataAnnnoation comes ModelState property that is used for validating form in Server side. 


Some common DataAnnoation attributes are:
	-Required
	-Range
	-RegularExpression
	-Compare
	-StringLenght
	-Data type
	-Credit Card number
	-Currency
	-Custom
	-Date
	-DateTime
	-Email
	 and more.............


Step1:Create a model.cs
using System.ComponentModel.DataAnnotations;
using adm_cts_2022.Models;
namespace adm_cts_2022.Models
{
    public class Student
    {
        [Required(ErrorMessage ="Plz Enter your Id")]
        [Display(Name="Student ID")]
        public int Id { get; set; }
        [Required(ErrorMessage = "Plz Enter your Name")]
        [Display(Name = "Student Name")]
        public string Name { get; set; }
    }
}

Step 2: call your model in Contrller method with httpget and httpPost:
   public ActionResult Index()
        {
            return View();
        }
        // GET: Valid
     [HttpGet]
     public ActionResult Student()
        {
            return View();
        }
        //httpPost
        [HttpPost]
        public ActionResult Student(Student sm)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    return RedirectToAction("Index");
                }
                return View();
            }
            catch(Exception)
            {
                return View();
            }
        }


Step 3: create Student (httpGet) from only

@model adm_cts_2022.Models.Student

@{
    ViewBag.Title = "Student";
}

<h2>Student Forms</h2>


@using(Html.BeginForm("Student","Valid",FormMethod.Post))
            {
<ol>
    <li>
        @Html.LabelFor(m => m.Id)
        @Html.TextBoxFor(m => m.Id)
        @Html.ValidationMessageFor(m => m.Id)
    </li>
    <li>
        @Html.LabelFor(m => m.Name)
        @Html.TextBoxFor(m => m.Name)
        @Html.ValidationMessageFor(m => m.Name)
    </li>
</ol>
<input type="submit" value="Save STudent" />
            }

Here is a list of Some important Data Annotation Attribute:
========================================
String Length:

Example:
	[StringLength(50,MinimumLength=3)]
Range:
Example:
	[Range(1,120,ErrorMessage="Age must be between 1-120 in years")]
MaxLength:
Example:
	[Range(50)]

CreditCard:

Example:
	[DataType(DataType.CreditCard)]
Compare:
Example:
	[Compare("Email",ErrorMessage="Email not matched"))]
Phone:
	[DataType(DataType.PhoneNumber)]
	[RegularExpression(@"^\(?([0-9]{2})[-.]?([0-9])

Valid URL:
Example:
	[Url][Required]
	public string URl{get;set;}

Validate with Dropdowlist in asp.ent mvc:
=============================
Step1: model .cs
  public class UserModel
    {
        [Required(ErrorMessage ="Gender is req")]
        public string Gender { get; set; }
     
    }

Step 2: Controller with action method
  public ActionResult Index()
        {
            return View();
        }
        
        [HttpPost]
        public ActionResult Index(UserModel user)
        {
            return View();
        }

Step 3: 

INdex.cshtml
@model adm_cts_2022.Models.UserModel

@{
    ViewBag.Title = "Index";
}


<h1>DropDownlist validation</h1>
<style>
    body {
        font-family: Arial;
        font-size: 14pt;
    }

    .error {
        color: red;
    }
</style>
<body>
    @using (Html.BeginForm("Index", "Valid", FormMethod.Post))
    {
        <table>
            <tr>
                <td>@Html.DisplayFor(m => m.Gender)</td>
                <td>
                    @Html.DropDownListFor(m => m.Gender, new List<SelectListItem>
{
new SelectListItem{Text="Male",Value="M"},
new SelectListItem{Text="Female",Value="F"}}, "Plz select Gender")

                
            </td>
            <td>@Html.ValidationMessageFor(m => m.Gender, "", new { @class = "error" })</td>
        </tr>
        <tr>
            <td></td>
            <td><input type="submit" value="Send Me" /></td>
        </tr>
    </table>
}
</body>


-----------------------------------------------------------------------------

ASP.NET MVC with Entity Framework : (Basic,Datafirst app, Fluent API)


Today I am going to discuss how to use EF 6 IN ASP.NET MVC 5 app to interact with SQL SERVER Database to perform the CRUD operations.

In ASP.NET MVC  app, the controller responds to the incomming HTTP(HTTPS) request , then gets the data from Model and hands it  over to view(UI).
the view then renders(display) the data. The model can be entities(fields) or business objects. 

Will show how to retrive the data from SQL Server Database using Entity Framework Database First Approach/Code First in ASP.NET MVC.


Step1: Creating the Database with Required Table and Data:

Employee Table 
	EmploeeID int PK IDNTITY(1,1),
	Name
	Gender
	City
	Salary
insert some values into your table 


STEP: 2 : Create a new Empty ASP.NET MVC APP
	File menu => New Project ->Choose MVC (EMPTY)

Step 3: Adding ADO.NET Entity Data Model in ASP.NET MVC
	-Right-Click on Models Folders and select Add=> New Item => Data => SELECT ADO.NET ENTITY DATA MODEL Tempalte => Provide a meanful name to your data model such EmpDataModel and finally click on Add button 
	-From next Entity Data Model Wizard => so select EF Designer from Database =>Next =>select your Connection Name =>Next
	-Choose Entity Framwork 6.x => Next  => select Database Object for your app .
	->Table -> dbo-> choose your emptable => Finish

Step 4: Build your application  (it will creeate the Employee Model Automatically) : POCO

Step 5: Creating Controller =>Right click on Controllers Folders => Sselect Add => Controller => Select MVC5 Controller Empty => give any name as EmpController => Click on Add button => Contrller will be created.
using CTSADM_CRUD.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace CTSADM_CRUD.Controllers
{
    public class EmployeeController : Controller
    {
        // GET: Employee
        public ActionResult Index()
        {
            EmployeeDBContext dBContext = new EmployeeDBContext();
            List<Employee> empList = dBContext.Employees.ToList();

            return View(empList);
        }
    }
}



Step 5: Lets modify or create Index action method with View Page.
@model IEnumerable<CTSADM_CRUD.Models.Employee>


@{
    ViewBag.Title = "Index";
}

<table class="table table-striped">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Gender)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Salary)
    </th>
    </tr>
    @foreach(var item in Model)
            {
<tr>
    <td>
        @Html.DisplayFor(modelItem => item.Name)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Gender)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.City)
    </td>
    <td>
        @Html.DisplayFor(modelItem => item.Salary)
    </td>
</tr>
           
    }
</table>


Step 6: SAve and Run.

 
-------------------------------------------------------------------------------------------------------------------------------------------------
Save Data in table using ASP.NET MVC with Entity framework


Step1: Create action method with httpGet verbs : (UI)
Step 2: Create action method with httpPost(Save data) :
 //Get: Emp/Create
        [HttpGet]

        public ActionResult Create()
        {
            return View();
        }

        //POST:Emp/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Employee employee)
        {
            if (ModelState.IsValid)
            {
                dBContext.Employees.Add(employee);
                dBContext.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(employee);

        }
    }

Step 3: Create.cshtml
@model CTSADM_CRUD.Models.Employee

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


Edit in ASP.NET MVC USING EF:
---------------------------------------------
 //GET:Emp/Edit/Id(1)
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(System.Net.HttpStatusCode.BadRequest);
            }
            Employee employee = dBContext.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        //POST:Emp/Ediit/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Employee employee)
        {
            if (ModelState.IsValid)
            {
                dBContext.Entry(employee).State = EntityState.Modified;
                dBContext.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(employee);
        }

Delete in ASP.NET MVC 5:
======================
 //Post:emp/Delete/1
        [HttpPost,ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Employee employee = dBContext.Employees.Find(id);
            dBContext.Employees.Remove(employee);
            dBContext.SaveChanges();
            return RedirectToAction("Index");
        }

        //Clear the buffer :Dispose   

        protected override void Dispose(bool disposing)
        {
            if(disposing)
            {
                dBContext.Dispose();  
            }
            base.Dispose(disposing);
        }
    }

-------------------------------------------------------------------------------------------------------------------------
Course_Table : CId, CName,CDuration,Tech, Fees, DOJ,DOE : kindly perform the CRUD operation 
---------------------------------------------------------------------------------------------------------------------------



CRUD operation using Code-First Approach in EF using ASP.NET MVC:
======================================================

Domain classess => Entity framework  => Database 

Step1: Create a new project 

Step 2: Install nuget package : Entity Framework 6

Step 3: Right click on Models => Select Add and then Class : give any proper as : Student.cs

 public class Student
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }
        public string Department { get; set; }
        public string EmailId { get; set; }
        public string Gender { get; set; }
        [DataType(DataType.Date),DisplayFormat(DataFormatString ="{0:MM/yyyy}",ApplyFormatInEditMode =true)]
        public DateTime? DOB { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }

    }

Step 4: Now you have to create DbContext.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.Entity;
namespace CRUD_CODEFIRST.Models
{
    public class StudentContext:DbContext
    {
        public StudentContext() : base("name=StudentDbContext")
        {

        }
        public DbSet Students { get; set; }
    }
}

STep 5: Creaate connection string under web.config file
<connectionStrings>
    <add name="StudentDbContext" connectionString="server=(localdb)\MSSQLLocalDB;initial catalog=amreenDB;integrated security=True;" providerName="System.Data.EntityClient" />
  </connectionStrings>

STep 6: Right click on project => build the application (it will create database along with table automatically)

STep 7: Now right click on Controller Folder and select Controller => Choose Add scaffold dialogbox and click on Add -> it will ask for controller name , give any proper name to controller : StudentController so it will generate all the code automatically.


Step 8: after this you can bind your UI based on particular action Method.

Step 9. Save and Run the project.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CRUD using repository-pattern in MVC 5 : The generic repository pattern in asp.net mvc is data access pattern to make your application loosely coupled. The generic repository pattern in asp.net mvc is a layer that works between Business data and data acess layer. Instead of writting entire data acess logic on controller  its bettter to write the loci in difffrent class is called Repository Pattern.
--------------------------------------------------


Step1: New Project with ASP.NET MVC

Step 2: Create a table (with PK)
Step 3: right click on model folder => Choose ado.net entity data model
Step 4: Right click on projecct -> Add new Folder _> Create a Folder name as Repository 

STep 5: right click on created Repository folder -> Add  an interface (IEmployeeRepos)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CRUD_REPOS_PATTERN.Models;

namespace CRUD_REPOS_PATTERN.Repositories
{
   public interface IEmployeeRepository
    {
        //dec abstract method
        IEnumerable<Employee> GetEmployees();
        Employee GetEmployeeById(int id);
        void NewEmployee(Employee employee);
        void UpdateEmployee(Employee employee);
        void DeleteEmployee(int id);
        void save();
    }
}



Step 6: right click on created Repository folder -> Add a class (EmployeeRepository.cs)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using CRUD_REPOS_PATTERN.Models;
using System.Data.Entity;

namespace CRUD_REPOS_PATTERN.Repositories
{
    public class EmployeeRepository : IEmployeeRepository
    {
        //crete obj of your empcontext class
        private readonly amreenDBEntities _dbContext;
        public EmployeeRepository()
        {
            _dbContext = new amreenDBEntities();

        }
        public EmployeeRepository(amreenDBEntities context)
        {
            _dbContext = context;
        }
        public void DeleteEmployee(int id)
        {
            var employee = _dbContext.Employees.Find(id);
            if (employee != null) _dbContext.Employees.Remove(employee);
        }

        public Employee GetEmployeeById(int id)
        {
            return _dbContext.Employees.Find(id);
        }
        //get all employees

        public IEnumerable<Employee> GetEmployees()
        {
            return _dbContext.Employees.ToList();
        }

        public void NewEmployee(Employee employee)
        {
             _dbContext.Employees.Add(employee);
            save();

        }

        public void save()
        {
            _dbContext.SaveChanges();
        }

        public void UpdateEmployee(Employee employee)
        {
            _dbContext.Entry(employee).State = EntityState.Modified;
        }
        // Dispose your connection
        private bool _disposed = false;
        protected virtual void Dispose(bool disposing)
        {
            if (!this._disposed)
            {
                if (disposing)
                {
                    _dbContext.Dispose();
                }
            }
               
        }
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}



Step 8: Create a new controller EmployeeController  and Call your IEmployeeReposotry method , ContextClass object 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using CRUD_REPOS_PATTERN.Models;
using CRUD_REPOS_PATTERN.Repositories;
using System.ComponentModel.DataAnnotations;

namespace CRUD_REPOS_PATTERN.Controllers
{
    public class EmpController : Controller
    {
        // GET: Emp

        //create objecct of IEmployee Repos
        private readonly IEmployeeRepository _employeeRepository;
        public EmpController()
        {
            _employeeRepository = new EmployeeRepository(new amreenDBEntities());

        }
        public EmpController(IEmployeeRepository employeeRepository)
        {
            _employeeRepository = employeeRepository;
        }
        //Get data from db
        public ActionResult Index()
        {
            var employee = _employeeRepository.GetEmployees();
            
            return View(employee);
        }
        // Details

        public ActionResult Details(int id)
        {
            var employee = _employeeRepository.GetEmployeeById(id);
            return View(employee);

        }
        // you can create view of Details

        public ActionResult Create()
        {
            return View();
        }
     
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Employee employee)
        {
            if (ModelState.IsValid)
            {
                _employeeRepository.NewEmployee(employee);
                _employeeRepository.save();
                return RedirectToAction("Index");
            }
            return View();
        }
        //Edit
        [HttpGet]
        public ActionResult Edit(int id)
        {
            var employee = _employeeRepository.GetEmployeeById(id);
            return View(employee);

        }

        //httpPost:Edit
        [HttpPost]
        public ActionResult Edit(Employee employee)
        {
            if (ModelState.IsValid)
            {
                _employeeRepository.UpdateEmployee(employee);
                _employeeRepository.save();
                return RedirectToAction("Index","Emp");
            }
            else
            {
                return View(employee);
            }
        }
        //Delete
        [HttpGet]
        public ActionResult Delete(int id)
        {
            var employee = _employeeRepository.GetEmployeeById(id);
            return View(employee);
        }
        //httpPost:Delete
        [HttpPost]
        public ActionResult ConfirmDelete(int id)
        {
            _employeeRepository.DeleteEmployee(id);
            _employeeRepository.save();
            return RedirectToAction("Index", "Emp");

        }
    }
}



Step 9: Create View of Action method Index.
@model IEnumerable<CRUD_REPOS_PATTERN.Models.Employee>

@{
    ViewBag.Title = "Index";
}

<h3 class="text-center text-uppercase">List of Employee</h3>
<p>
    @Html.ActionLink("Create New", "Create", "", new { 
@class="btn btn-success"})
</p>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(m => m.Name)</th>
            <th>@Html.DisplayNameFor(m => m.Gender)</th>
            <th>@Html.DisplayNameFor(m => m.City)</th>
            <th>@Html.DisplayNameFor(m => m.Salary)</th>
            <th>Actions(s)</th>

        </tr>

    </thead>
    <tbody>
        @foreach(var emp in Model)
            {
        <tr>
            <td>@emp.Name</td>
            <td>@emp.Gender</td>
            <td>@emp.City</td>
            <td>@emp.Salary</td>
            <td>
                @Html.ActionLink("Details", "Details", new { id = emp.EmployeeID }, new { @class = "btn btn-info" })
                @Html.ActionLink("Edit", "Edit", new { id = emp.EmployeeID }, new { @class = "btn btn-primary" })
                @Html.ActionLink("Delete", "Delete", new { id = emp.EmployeeID }, new { @class = "btn btn-danger" })
            </td>
        </tr>
            }
    </tbody>
</table>



STep 10. Save and Run.


ASP.NET MVC Finished as per given hand-book
==========================================================================================================

age 3 –.NET Advanced Fse

Async and Multi-thrading : C# 7.0
----------------------------------

C# Asynchronous  Programming - Async and Await : In .NET framework and c# in particualr we have a advance features such as: Asynchronour programming  : async and await words.


As a develper, you surely will face or faced scenarious where certian actions or oprations took a considerable amout of time to execute yoru app. We regularly have to do long-running task such a reading a file, callingn a web api,downloading a big file, we could wait for one of theese these task to be finished before exectiong another task. 

What is Async Progrmming : we could define async programming as the way of excuting programming code in thread(Multi-thread) withoout having to wait for an I/O bound or CPU Bound TASK TO finish.

One of the Ideas of async progmming lang is to divide our logic or code into awaitbale task so that we dont block the execution of our app. 
we can an async method and get a task object that represent it. 

Step1: Crate a console app or  Asp.net core app


Example:
using System;
using System.Threading.Tasks;

namespace Async_demo
{
    class Program
    {
        static void Main(string[] args)
        {
            //Call 
            Method1();
            Method2();
            Console.ReadKey();
        }
        // going to dec two method , which are not dependdent on each other
        public static async Task Method1()
        {
            await Task.Run(() =>
            {
                for (int i = 0; i <= 20; i++)
                {
                    Console.WriteLine("We are using async programming");
                    Task.Delay(100).Wait();

                }
            });

        }
        //create simple 
        public static void Method2()
        {
            for(int i = 0; i <= 25; i++)
            {
                Console.WriteLine("It will not dependent on Method 1");
                Task.Delay(100).Wait();
            }
        }
    }
}


Exam-l
using System;
using System.Threading.Tasks;

namespace Async_demo
{
    class Program
    {
        static void Main(string[] args)
        {
            CallMethod();
            Console.ReadKey();       
        }
        public static async void CallMethod()
        {
            Task<int> task = Method1();
            //more methods
            Method2();
            int count = await task;
            Method3(count);
        }
        public static async Task<int> Method1()
        {
            int c = 0;
            await Task.Run(() =>
            {
                for (int i = 0; i < 100; i++)
                {
                    Console.WriteLine("I am method 1");
                    c += 1;
                }
            });
            return c;
        }
        // another method
        public static void Method2()
        {
            for(int i = 0; i < 20; i++)
            {
                Console.WriteLine("Method -2");
            }
        }
        public static void Method3(int count)
        {
            Console.WriteLine("Total count is:" + count);
        }
      
    }
}




Async with File Handling:
===================


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace readfile_demo_async
{
    class Program
    {
        static void Main(string[] args)
        {
            //call  your call readfile method
            Task task = new Task(ReadFileMethod);
            task.Start();
            task.Wait();
            Console.ReadLine();
        }
        static async void ReadFileMethod()
        {
            string filePath = "E:\\bb2.txt";
            Task<int> task = ReadFile(filePath);
            Console.WriteLine("Before Work 1 operation");
            Console.WriteLine("Before Work 2 operation");
            Console.WriteLine("Before Work 3 operation");
            int lenth = await task;
            Console.WriteLine("Total : " + lenth);
            Console.WriteLine("After work 1");
            Console.WriteLine("After work 2");



        }
        //readFile method to reading file
        static async Task<int> ReadFile(string file)
        {
            int length = 0;
            Console.WriteLine("My file is going to read");
            using (StreamReader r = new StreamReader(file))
            {
                //read all chhars iin your file 
                string s = await r.ReadToEndAsync();
                length = s.Length;

            }
            Console.WriteLine("All operation is complteed... ");
            return length;
        }
    }
}



Multi-Thrading in C#:
===================

Thread:  The thread is a basic unit of execution within the process, an its responsible for executing the applicatioin logic by default, every app or program will carry on one to execute the app logic and that thread is called by MainThread.

so you can say that every program or app is by default a single thrreaded model.

For Example: in windows Os, if we open Ms-word, Exccecl, Notepad app simultneously then each app procecss will be taken by care separte thread in Windows OS.

C# Thread LIfe Cycle:
=================
	-In C# each thread has a life-cycle. The life cycle of thread is started with instancce of System.Thrading namespace.
There are diff. states in the Life Cycle:

	-UnStarted
	-Running
	-Running
	-Not Runnable
	-Dead(Terminated)

Thread Class:  its provides some class ,method and props to creeate and control thread: System.Threading. namespacec

Methods:


	Abort(): its user terminate the curent thread
	Join() : join more than one thread
	Sleep() : used to supend the curent thread for spciiiifed milliseconds
	Start(): Chage the current state of the thread to Runnable mode


exaample: 

Examp1: Simple thread to get their thread Name and CurentThread



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace readfile_demo_async
{
    class Program
    {
        static void Main(string[] args)
        {
            Thread t = Thread.CurrentThread;
            t.Name = "CTS Adm Batch-2022";
            Console.WriteLine("Current thread name :" + t.Name);
            Console.WriteLine("Current :" + Thread.CurrentThread.Name);
            Console.WriteLine("Thrad Id{0}", t.ManagedThreadId);
            Console.WriteLine("is backing threads:{0}", t.IsBackground);
            Console.WriteLine("Thread Culture:{0}", t.CurrentCulture);
        }
       
    }
}


Example: 2:  Thrad with Loopingn

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace readfile_demo_async
{
    class Program
    {
        static void Main(string[] args)
        {
            Method1();
            Method2();
            Method3();
            Console.ReadLine();
        }
       
        static void Method1()
        {
            for(int i=1;i<=5;i++)
            {
                Console.WriteLine("Method1:{0}", i);
            }
        }
        //method 2
        static void Method2()
        {
            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method2:{0}", i);
                if (i == 3)
                {
                    Console.WriteLine("Lets performe some back ground process");
                    //make it sleep for 10 milliseconds
                    Thread.Sleep(10);
                    Console.WriteLine("Opt is done");
                }
            }
        }
        //method 3
        static void Method3()
        {
            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method3:{0}", i);
            }
        }
    }
}

Thread: Abort() :
=============

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace readfile_demo_async
{
    public class MyThrad
    {
        public void India()
        {
            for(int i = 0; i < 10; i++)
            {
                Console.WriteLine(i);
                Thread.Sleep(1000);            }        }    }
    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Start of the Thread");
            MyThrad myThrad = new MyThrad();
            Thread thread1 = new Thread(new ThreadStart(myThrad.India));
            Thread thread2 = new Thread(new ThreadStart(myThrad.India));
            thread1.Start();
            thread2.Start();            try            {

                thread1.Abort();
            }
            catch(ThreadAbortException tea)
            {
                Console.WriteLine(tea.ToString());
            }

        }
       
    
    }
}



C# Join(): in Thrading
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace readfile_demo_async
{
    public class MyThrad
    {
        public void India()
        {
            for(int i = 0; i < 10; i++)
            {
                Console.WriteLine(i);
                Thread.Sleep(200);            }        }    }
    class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Start of the Thread");
            MyThrad myThrad = new MyThrad();
            Thread thread1 = new Thread(new ThreadStart(myThrad.India));
            Thread thread2 = new Thread(new ThreadStart(myThrad.India));
            Thread thread3 = new Thread(new ThreadStart(myThrad.India));
            thread1.Start();
            thread1.Join();
            thread2.Start();
            thread3.Start();
            

        }
       
    
    }
}


Thread Priority: 
	-Highest
	-Normal
	-Lowest

Example:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace readfile_demo_async
{
    public class MyThrad
    {
        public void India()
        {
            Thread t = Thread.CurrentThread;
            Console.WriteLine(t.Name + " is running now...");
            Console.ReadLine();
        }
        class Program
        {
            static void Main(string[] args)
            {


                MyThrad thrad = new MyThrad();
                Thread thrad1 = new Thread(new ThreadStart(thrad.India));
                Thread thrad2 = new Thread(new ThreadStart(thrad.India));
                Thread thrad3 = new Thread(new ThreadStart(thrad.India));
                thrad1.Name = "CTS";
                thrad2.Name = "Infosys";
                thrad3.Name = "IBM";
                //set prioriity
                thrad3.Priority = ThreadPriority.Highest;
                thrad2.Priority = ThreadPriority.Normal;
                thrad1.Priority = ThreadPriority.Lowest;
                thrad1.Start();
                thrad2.Start();
                thrad3.Start();

            }
        }
    }
}


C# Additional has been finished
=========================================================================

ASP.NET CORE :
==============

Today Agenda:
	-Intro ASP.NET CORE

I will teach you the basics fo building an ASP.NET CORE, ASP.NET CORE MVC(Model View Controller) using Vs 2019 and VS Code

Pre-requisites for it(.NET Core framework, C# basic +oops, HTML+CSS+BS)


Intro of ASP.NET CORE:   Asp.net core is collection of libraries that form a framework for builing web application on vareity fo Platform such Windows, Linux and macOS etc.

ASP.NET Core is not next version of ASP.NET(.net framework) . Its brannd new version  re-written from scrach.
It has a number Arch, changes that result in much esier, learner, clearner and modular framework.

ASP.NET Core can run both .NET CORE and .NET fRAMEWORK(Old).

here Core word is ASP.NET Core is misleading, the name suggest that the ASP.NET CORE app can onnly be built on .NET CORE which is totally wrong.

here ASP.NET CORE web app can built, deploy using .NET CORE runtime as well as .NET FRAMEWORK.

Some important features of ASP.NET Core:
================================
	-You can build and run cross-platform ASP.NET CORE app on Windows, Mac, Linux
	-ASP.NET CORE unifies(MVC) & RESTFUL API(WEB API)
	-It has abiltiy to host on IIS or SELF(Domain) , Clouds (AWS/Azure)
	-Easy to integrationw ith client side framework like Angular,reactjs, vue.js , knockout.js etc

Note: It provides a rich with NuGet package (you can install any lib in your app)
--------------------------------------------------------------------------------------------------------------------------------------

Point 1: ASP.NET CORE Installation Setup
Point 2: you need to  verfy whether DOTNET CORE installed or not
	- open command prompt : type dotnet --version
Point 3: Crating ASP.NET Core web app (using Vs 2019 and VS Code)

Procss using VS code:
================
STEP1: open CLI :POWERSHELL,CMD
	type dotnet new [enter key]
	 or
	 	dotnet new -l

it will show all the template avilable in dotne core


>dotnet new
Templates                                     	Short Name        	   Language    Tags
--------------------------------------------  -------------------  ----------  ----------------------
Console Application                          	 console           	   [C#],F#,VB  Common/Console
Class library                                	 classlib            	 [C#],F#,VB  Common/Library
WPF Application                             	  wpf                 		 [C#],VB     Common/WPF
WPF Class library                            	 wpflib              	 [C#],VB     Common/WPF
WPF Custom Control Library                    wpfcustomcontrollib  [C#],VB     Common/WPF
WPF User Control Library                      wpfusercontrollib    [C#],VB     Common/WPF
Windows Forms App                             winforms             [C#],VB     Common/WinForms
Windows Forms Control Library                 winformscontrollib   [C#],VB     Common/WinForms
Windows Forms Class Library                   winformslib          [C#],VB     Common/WinForms
Worker Service                                worker               [C#],F#     Common/Worker/Web
Unit Test Project                             mstest               [C#],F#,VB  Test/MSTest
NUnit 3 Test Project                          nunit                [C#],F#,VB  Test/NUnit
NUnit 3 Test Item                             nunit-test           [C#],F#,VB  Test/NUnit
xUnit Test Project                            xunit                [C#],F#,VB  Test/xUnit
MVC ViewImports                               viewimports          [C#]        Web/ASP.NET
Razor Component                               razorcomponent       [C#]        Web/ASP.NET
MVC ViewStart                                 viewstart            [C#]        Web/ASP.NET
Razor Page                                    page                 [C#]        Web/ASP.NET
Blazor Server App                             blazorserver         [C#]        Web/Blazor
Blazor WebAssembly App                        blazorwasm           [C#]        Web/Blazor/WebAssembly
ASP.NET Core Empty                            web                  [C#],F#     Web/Empty
ASP.NET Core Web App (Model-View-Controller)  mvc                  [C#],F#     Web/MVC
ASP.NET Core Web App                          webapp               [C#]        Web/MVC/Razor Pages
ASP.NET Core with React.js and Redux          reactredux           [C#]        Web/MVC/SPA
ASP.NET Core with Angular                     angular              [C#]        Web/MVC/SPA
ASP.NET Core with React.js                    react                [C#]        Web/MVC/SPA
Razor Class Library                           razorclasslib        [C#]        Web/Razor/Library
ASP.NET Core Web API                          webapi               [C#],F#     Web/WebAPI
ASP.NET Core gRPC Service                     grpc                 [C#]        Web/gRPC
dotnet gitignore file                         gitignore                        Config
global.json file                              globaljson                       Config
NuGet Config                                  nugetconfig                      Config
Dotnet local tool manifest file               tool-manifest                    Config
Web Config                                    webconfig                        Config
Solution File                                 sln                              Solution
Protocol Buffer File                          proto                            Web/gRPC


===============================================================================================================


Step 2: 
dotnet new mvc -n <project_name>


Step 3: cd <projecc_name>

Step 4: dotnet build

ASP.NET CORE MVC -Project Strucutre
-------------------------------------------------------
Vs Studio 2019/22 : open solution exp(Ctrl+L)
	-Connected Servicec(Cloud connection)
	-Depdendiecies (Add the DI dotnet add pacckages)
	-Properties
	-WWWRoot(static files : css,js,lib,bs)
	-Contrller 
	-Models
	-Views(Home/Shared)
	-appsetting.json(database configure)
	-Progrm.cs(Entry point of app)
	-Startup.cs(Midddle ware of app)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is Controller:
	-What is the Role of a Contrller
	-How to Add a new Contrller
	-What are the action method(IAction)
	-How to call action method from browser

Role of Controller:  work with user input(broser request)
		-Play an imprnt role in flow of app by handing incoming req and provide data to view or to browser req.

How to Add:
	VS Studio 2019 => Right click on Controller => Choose Controller =Name =>ok
	make sure suppix Controller.cs file

Step1: Add a Contrller with IAction method
  public class DemoController : Controller
    {
        public string Hello()
        {
            return "Hello we are using simmple method inside Contrller";
        }
        public IActionResult Index()
        {
            return View();
        }

Step 2: Create a View baseed on Contrller method

@{
    ViewData["Title"] = "My first App in MVC CORE";
            }

<h1 style="color:red;">Welcome Kisholay Controller </h1>




save and run

ASP.NET CORE WITH MODEL:
============================
Model: Model represent domain(entity) specfic data and business logic in asp.net core MVC architecture. It maintain the data of the application. Model object retrive and store model state the permanent like a database.

Addingn Model:
	Step1: Select your Model folder => choose new class given any name Student.cs
	  public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
Step2: Open your Controller 
		-Create a IAction method
		-Create an object of your student.cs model
		-Assign the value in prop
using Kisholay_Demo.Models;
namespace Kisholay_Demo.Controllers
{
    public class DemoController : Controller
    {
       
        public IActionResult Index()
        {
            Student s = new Student();
            s.Id = 100;
            s.Name = "Keerthan Shetty";
            return View(s);
        }    }}

Step 3: bind your Iacction method wtih view
@model Kisholay_Demo.Models.Student

@{ 
    ViewData["Title"] = "Student data";
}

<h2>Student Data</h2>
<p>Id: @Model.Id</p>
<p>Name:@Model.Name</p>

Model with Collection : LINQ (IEnumerable)
----------------------------------------------------------
Contrler method:
 public IActionResult Index()
        {
            List<Student> stuList = new List<Student>()
            {
                new Student{Id=100, Name="Ranjeet"},
                  new Student{Id=101, Name="Jerlin"},
                    new Student{Id=102, Name="Kisholay"}
            };
     
            return View(stuList);
        }

View Page:
@model IEnumerable<Kisholay_Demo.Models.Student>

@{ 
    ViewData["Title"] = "Student data";
}

<h2>Student Data</h2>
@foreach(var i in Model)
            {
                <p>Id: @i.Id</p>
                <p>Name:@i.Name</p>
            }



ViewEngine in ASP.NET CORE:
=====================
View Engine: Viewengine is responsilbel for creating HTML for view.
	-it convert corresponding view  with : HTML+ Progmming lang(C#/VB.net)

View Engine : used to render your page on the browser.


Razor: Razor is view engine
	-Razor is not a new programming lang
	-View file extension for razor is .chstml or vbhtmll

Razor Syntax:  Razor is markup syntax for embeeding server side code itno web page.
It always start with @ symbol.

Lets do some example with Razor:
=========================

<div>
    @DateTime.Now;
</div>

<p>@(5+2)</p>

<br />

@{ 
    var a = 10;
    var b = 5;
    var c = a + b;
}

<div><label>@c</label></div>


Razor with List:


<div>
    @DateTime.Now;
</div>

<p>@(5 + 2)</p>

<br />

@{ 
    var a = 10;
    var b = 5;
    var c = a + b;
}

<div><label>@c</label></div>

<br />
@{ 
        var colorList = new List<string>()
    {
         "REd","Green","Pink" };
    }


<label>@colorList.FirstOrDefault()</label>



Razor View Engine with Conditional Statement/Looping:
==========================================
<br />

@{ 
    bool isTrue = false;
}

@if (isTrue) 
{ 
<h1>Hi Guys we are doing MVC 5</h1>
}

<br />

@{ 
    var price = 50;
}
@if (price > 30) 
{ 
    <p>The pricce is too high</p>
}


<br />

@for(var i = 1; i <= 10; i++)
            {
                <p>Line: @i</p>
            }

<br />

<ul>
    @foreach(var c in "food")
            {
                <li>@c</li>
            }
</ul>

<br />

@{ 
    string[] friends = { "Tom", "Bill", "sunder" };
}

@foreach(var n in friends)
            {
                <li>@n</li>
            }

ASP.NET CCORE MVC: RAZOR finish

PASSING Value between Contrller /Model and View: using Viewbag and ViewData
=========================================================

	-ViewBag
Syntax:
	ViewBag.Myproname=value;
	
how to call in view: @ViewBag.data


	-ViewData

Syntax:
	ViewData["key"]=value;
example:
	VeiwData["name"]="CTS";


Calling: @ViewData["name"]


Step1: Controller method:
  public IActionResult RazorShow()

        {
            ViewBag.data = "CTS is a MNCs";
            ViewData["job"] = "Devloper";

            return View();
        }

Step 2: View Page
<hr />
@ViewBag.data

<br />
@ViewData["job"]


Kindly use ViewData and ViewBag with Model
===================================


